#lang typed/racket/base

(provide (all-defined-out))

;;; this file is auto-generated by digimon/digivice/linguist

; Defines all Languages known to GitHub.
;
; fs_name               - Optional field. Only necessary as a replacement for the sample directory name if the
;                         language name is not a valid filename under the Windows filesystem (e.g., if it
;                         contains an asterisk).
; type                  - Either data, programming, markup, prose, or nil
; aliases               - An Array of additional aliases (implicitly
;                         includes name.downcase)
; ace_mode              - A String name of the Ace Mode used for highlighting whenever
;                         a file is edited. This must match one of the filenames in http://git.io/3XO_Cg.
;                         Use "text" if a mode does not exist.
; codemirror_mode       - A String name of the CodeMirror Mode used for highlighting whenever a file is edited.
;                         This must match a mode from https://git.io/vi9Fx
; codemirror_mime_type  - A String name of the file mime type used for highlighting whenever a file is edited.
;                         This should match the `mime` associated with the mode from https://git.io/f4SoQ
; wrap                  - Boolean wrap to enable line wrapping (default: false)
; extensions            - An Array of associated extensions (the first one is
;                         considered the primary extension, the others should be
;                         listed alphabetically)
; filenames             - An Array of filenames commonly associated with the language
; interpreters          - An Array of associated interpreters
; language_id           - Integer used as a language-name-independent indexed field so that we can rename
;                         languages in Linguist without reindexing all the code on GitHub. Must not be
;                         changed for existing languages without the explicit permission of GitHub staff.
; color                 - CSS hex color to represent the language. Only used if type is "programming" or "markup".
; tm_scope              - The TextMate scope that represents this programming
;                         language. This should match one of the scopes listed in
;                         the grammars.yml file. Use "none" if there is no grammar
;                         for this language.
; group                 - Name of the parent language. Languages in a group are counted
;                         in the statistics as the parent language.
;
; Any additions or modifications (even trivial) should have corresponding
; test changes in `test/test_blob.rb`.
;
; Please keep this list alphabetized. Capitalization comes before lowercase.

(define-type Language-Misc-Datum (U String Symbol (Pairof Symbol (Listof Symbol)) (Pairof String (Listof String))))
(define-type Github-Language (List Natural String Symbol (Pairof Bytes (Listof Bytes)) (Option Keyword) (Immutable-HashTable Symbol Language-Misc-Datum)))

(define git-languages
  :
  (Listof Github-Language)
  '((0
     "1C Enterprise"
     programming
     (#".bsl" #".os")
     #:814CCC
     #hasheq((ace_mode . text) (tm_scope . source.bsl)))
    (387204628
     "2-Dimensional Array"
     data
     (#".2da")
     #:38761D
     #hasheq((ace_mode . text) (tm_scope . source.2da)))
    (577529595
     "4D"
     programming
     (#".4dm")
     #:004289
     #hasheq((ace_mode . text) (tm_scope . source.4dm)))
    (1
     "ABAP"
     programming
     (#".abap")
     #:E8274B
     #hasheq((ace_mode . abap) (tm_scope . source.abap)))
    (452681853
     "ABAP CDS"
     programming
     (#".asddls")
     #:555e25
     #hasheq((ace_mode . text) (tm_scope . source.abapcds)))
    (429
     "ABNF"
     data
     (#".abnf")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.abnf)))
    (2
     "AGS Script"
     programming
     (#".asc" #".ash")
     #:B9D9FF
     #hasheq((ace_mode . c_cpp)
             (aliases . ("ags"))
             (codemirror_mode . clike)
             (tm_scope . source.c++)))
    (451700185
     "AIDL"
     programming
     (#".aidl")
     #:34EB6B
     #hasheq((ace_mode . text)
             (interpreters . (aidl))
             (tm_scope . source.aidl)))
    (658971832
     "AL"
     programming
     (#".al")
     #:3AA2B5
     #hasheq((ace_mode . text) (tm_scope . source.al)))
    (3
     "AMPL"
     programming
     (#".ampl" #".mod")
     #:E6EFBB
     #hasheq((ace_mode . text) (tm_scope . source.ampl)))
    (4
     "ANTLR"
     programming
     (#".g4")
     #:9DC3FF
     #hasheq((ace_mode . text) (tm_scope . source.antlr)))
    (5
     "API Blueprint"
     markup
     (#".apib")
     #:2ACCA8
     #hasheq((ace_mode . markdown)
             (tm_scope . text.html.markdown.source.gfm.apib)))
    (6
     "APL"
     programming
     (#".apl" #".dyalog")
     #:5A8164
     #hasheq((ace_mode . text)
             (codemirror_mode . apl)
             (interpreters . (apl aplx dyalog))
             (tm_scope . source.apl)))
    (124996147
     "ASL"
     programming
     (#".asl" #".dsl")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.asl)))
    (7
     "ASN.1"
     data
     (#".asn" #".asn1")
     #f
     #hasheq((ace_mode . text)
             (codemirror_mode . asn.1)
             (tm_scope . source.asn)))
    (564186416
     "ASP.NET"
     programming
     (#".asax" #".ascx" #".ashx" #".asmx" #".aspx" #".axd")
     #:9400ff
     #hasheq((ace_mode . text)
             (aliases . ("aspx" "aspx-vb"))
             (codemirror_mode . htmlembedded)
             (tm_scope . text.html.asp)))
    (9
     "ATS"
     programming
     (#".dats" #".hats" #".sats")
     #:1ac620
     #hasheq((ace_mode . ocaml) (aliases . ("ats2")) (tm_scope . source.ats)))
    (10
     "ActionScript"
     programming
     (#".as")
     #:882B0F
     #hasheq((ace_mode . actionscript)
             (aliases . ("actionscript 3" "actionscript3" "as3"))
             (tm_scope . source.actionscript.3)))
    (11
     "Ada"
     programming
     (#".adb" #".ada" #".ads")
     #:02f88c
     #hasheq((ace_mode . ada)
             (aliases . ("ada95" "ada2005"))
             (tm_scope . source.ada)))
    (884614762
     "Adblock Filter List"
     data
     (#".txt")
     #:800000
     #hasheq((ace_mode . text)
             (aliases . ("ad block filters" "ad block" "adb" "adblock"))
             (tm_scope . text.adblock)))
    (147198098
     "Adobe Font Metrics"
     data
     (#".afm")
     #:fa0f00
     #hasheq((ace_mode . text)
             (aliases
              .
              ("acfm"
               "adobe composite font metrics"
               "adobe multiple font metrics"
               "amfm"))
             (tm_scope . source.afm)))
    (12
     "Agda"
     programming
     (#".agda")
     #:315665
     #hasheq((ace_mode . text) (tm_scope . source.agda)))
    (13
     "Alloy"
     programming
     (#".als")
     #:64C800
     #hasheq((ace_mode . text) (tm_scope . source.alloy)))
    (14
     "Alpine Abuild"
     programming
     (#"")
     #:0D597F
     #hasheq((ace_mode . sh)
             (aliases . ("abuild" "apkbuild"))
             (codemirror_mode . shell)
             (filenames . ("APKBUILD"))
             (group . " Shell")
             (tm_scope . source.shell)))
    (187772328
     "Altium Designer"
     data
     (#".OutJob" #".PcbDoc" #".PrjPCB" #".SchDoc")
     #:A89663
     #hasheq((ace_mode . ini) (aliases . ("altium")) (tm_scope . source.ini)))
    (389477596
     "AngelScript"
     programming
     (#".as" #".angelscript")
     #:C7D7DC
     #hasheq((ace_mode . text)
             (codemirror_mode . clike)
             (tm_scope . source.angelscript)))
    (15
     "Ant Build System"
     data
     (#"")
     #:A9157E
     #hasheq((ace_mode . xml)
             (codemirror_mode . xml)
             (filenames . ("ant.xml" "build.xml"))
             (tm_scope . text.xml.ant)))
    (1067292663
     "Antlers"
     markup
     (#".antlers.html" #".antlers.php" #".antlers.xml")
     #:ff269e
     #hasheq((ace_mode . text) (tm_scope . text.html.statamic)))
    (16
     "ApacheConf"
     data
     (#".apacheconf" #".vhost")
     #:d12127
     #hasheq((ace_mode . apache_conf)
             (aliases . ("aconf" "apache"))
             (filenames . (".htaccess" "apache2.conf" "httpd.conf"))
             (tm_scope . source.apache-config)))
    (17
     "Apex"
     programming
     (#".cls")
     #:1797c0
     #hasheq((ace_mode . java)
             (codemirror_mode . clike)
             (tm_scope . source.java)))
    (18
     "Apollo Guidance Computer"
     programming
     (#".agc")
     #:0B3D91
     #hasheq((ace_mode . assembly_x86)
             (group . " Assembly")
             (tm_scope . source.agc)))
    (19
     "AppleScript"
     programming
     (#".applescript" #".scpt")
     #:101F1F
     #hasheq((ace_mode . applescript)
             (aliases . ("osascript"))
             (interpreters . (osascript))
             (tm_scope . source.applescript)))
    (20
     "Arc"
     programming
     (#".arc")
     #:aa2afe
     #hasheq((ace_mode . text) (tm_scope . none)))
    (22
     "AsciiDoc"
     prose
     (#".asciidoc" #".adoc" #".asc")
     #:73a0c5
     #hasheq((ace_mode . asciidoc)
             (tm_scope . text.html.asciidoc)
             (wrap . true)))
    (23
     "AspectJ"
     programming
     (#".aj")
     #:a957b0
     #hasheq((ace_mode . text) (tm_scope . source.aspectj)))
    (24
     "Assembly"
     programming
     (#".asm" #".a51" #".i" #".inc" #".nas" #".nasm")
     #:6E4C13
     #hasheq((ace_mode . assembly_x86)
             (aliases . ("asm" "nasm"))
             (tm_scope . source.assembly)))
    (578209015
     "Astro"
     markup
     (#".astro")
     #:ff5a03
     #hasheq((ace_mode . html)
             (codemirror_mode . jsx)
             (tm_scope . source.astro)))
    (591605007
     "Asymptote"
     programming
     (#".asy")
     #:ff0000
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (interpreters . (asy))
             (tm_scope . source.c++)))
    (25
     "Augeas"
     programming
     (#".aug")
     #:9CC134
     #hasheq((ace_mode . text) (tm_scope . none)))
    (26
     "AutoHotkey"
     programming
     (#".ahk" #".ahkl")
     #:6594b9
     #hasheq((ace_mode . autohotkey)
             (aliases . ("ahk"))
             (tm_scope . source.ahk)))
    (27
     "AutoIt"
     programming
     (#".au3")
     #:1C3552
     #hasheq((ace_mode . autohotkey)
             (aliases . ("au3" "AutoIt3" "AutoItScript"))
             (tm_scope . source.autoit)))
    (785497837
     "Avro IDL"
     data
     (#".avdl")
     #:0040FF
     #hasheq((ace_mode . text) (tm_scope . source.avro)))
    (28
     "Awk"
     programming
     (#".awk" #".auk" #".gawk" #".mawk" #".nawk")
     #:c30e9b
     #hasheq((ace_mode . text)
             (interpreters . (awk gawk mawk nawk))
             (tm_scope . source.awk)))
    (28923963
     "BASIC"
     programming
     (#".bas")
     #:ff0000
     #hasheq((ace_mode . text) (tm_scope . source.basic)))
    (720859680
     "Ballerina"
     programming
     (#".bal")
     #:FF5000
     #hasheq((ace_mode . text) (tm_scope . source.ballerina)))
    (29
     "Batchfile"
     programming
     (#".bat" #".cmd")
     #:C1F12E
     #hasheq((ace_mode . batchfile)
             (aliases . ("bat" "batch" "dosbatch" "winbatch"))
             (tm_scope . source.batchfile)))
    (545626333
     "Beef"
     programming
     (#".bf")
     #:a52f4e
     #hasheq((ace_mode . csharp)
             (codemirror_mode . clike)
             (tm_scope . source.cs)))
    (30
     "Befunge"
     programming
     (#".befunge" #".bf")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.befunge)))
    (121855308
     "Berry"
     programming
     (#".be")
     #:15A13C
     #hasheq((ace_mode . text) (aliases . ("be")) (tm_scope . source.berry)))
    (982188347
     "BibTeX"
     markup
     (#".bib" #".bibtex")
     #:778899
     #hasheq((ace_mode . tex)
             (codemirror_mode . stex)
             (group . " TeX")
             (tm_scope . text.bibtex)))
    (321200902
     "Bicep"
     programming
     (#".bicep")
     #:519aba
     #hasheq((ace_mode . text) (tm_scope . source.bicep)))
    (1055528081
     "Bikeshed"
     markup
     (#".bs")
     #:5562ac
     #hasheq((ace_mode . html)
             (codemirror_mode . htmlmixed)
             (tm_scope . source.csswg)))
    (31
     "Bison"
     programming
     (#".bison")
     #:6A463F
     #hasheq((ace_mode . text) (group . " Yacc") (tm_scope . source.yacc)))
    (32
     "BitBake"
     programming
     (#".bb")
     #:00bce4
     #hasheq((ace_mode . text) (tm_scope . none)))
    (33
     "Blade"
     markup
     (#".blade" #".blade.php")
     #:f7523f
     #hasheq((ace_mode . text) (tm_scope . text.html.php.blade)))
    (34
     "BlitzBasic"
     programming
     (#".bb" #".decls")
     #:00FFAE
     #hasheq((ace_mode . text)
             (aliases . ("b3d" "blitz3d" "blitzplus" "bplus"))
             (tm_scope . source.blitzmax)))
    (35
     "BlitzMax"
     programming
     (#".bmx")
     #:cd6400
     #hasheq((ace_mode . text)
             (aliases . ("bmax"))
             (tm_scope . source.blitzmax)))
    (36
     "Bluespec"
     programming
     (#".bsv")
     #:12223c
     #hasheq((ace_mode . verilog) (tm_scope . source.bsv)))
    (37
     "Boo"
     programming
     (#".boo")
     #:d4bec1
     #hasheq((ace_mode . text) (tm_scope . source.boo)))
    (955017407
     "Boogie"
     programming
     (#".bpl")
     #:c80fa0
     #hasheq((ace_mode . text)
             (interpreters . (boogie))
             (tm_scope . source.boogie)))
    (38
     "Brainfuck"
     programming
     (#".b" #".bf")
     #:2F2530
     #hasheq((ace_mode . text)
             (codemirror_mode . brainfuck)
             (tm_scope . source.bf)))
    (943571030
     "BrighterScript"
     programming
     (#".bs")
     #:66AABB
     #hasheq((ace_mode . text) (tm_scope . source.brs)))
    (39
     "Brightscript"
     programming
     (#".brs")
     #:662D91
     #hasheq((ace_mode . text) (tm_scope . source.brs)))
    (153503348
     "Browserslist"
     data
     (#"")
     #:ffd539
     #hasheq((ace_mode . text)
             (filenames . (".browserslistrc" "browserslist"))
             (tm_scope . text.browserslist)))
    (41
     "C"
     programming
     (#".c" #".cats" #".h" #".idc")
     #:555555
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (interpreters . (tcc))
             (tm_scope . source.c)))
    (42
     "C#"
     programming
     (#".cs" #".cake" #".csx" #".linq")
     #:178600
     #hasheq((ace_mode . csharp)
             (aliases . ("csharp" "cake" "cakescript"))
             (codemirror_mode . clike)
             (tm_scope . source.cs)))
    (43
     "C++"
     programming
     (#".cpp"
      #".c++"
      #".cc"
      #".cp"
      #".cxx"
      #".h"
      #".h++"
      #".hh"
      #".hpp"
      #".hxx"
      #".inc"
      #".inl"
      #".ino"
      #".ipp"
      #".ixx"
      #".re"
      #".tcc"
      #".tpp")
     #:f34b7d
     #hasheq((ace_mode . c_cpp)
             (aliases . ("cpp"))
             (codemirror_mode . clike)
             (tm_scope . source.c++)))
    (44
     "C-ObjDump"
     data
     (#".c-objdump")
     #f
     #hasheq((ace_mode . assembly_x86) (tm_scope . objdump.x86asm)))
    (45
     "C2hs Haskell"
     programming
     (#".chs")
     #f
     #hasheq((ace_mode . haskell)
             (aliases . ("c2hs"))
             (codemirror_mode . haskell)
             (group . " Haskell")
             (tm_scope . source.haskell)))
    (390788699
     "CAP CDS"
     programming
     (#".cds")
     #:0092d1
     #hasheq((ace_mode . text) (aliases . ("cds")) (tm_scope . source.cds)))
    (29176339
     "CIL"
     data
     (#".cil")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.cil)))
    (46
     "CLIPS"
     programming
     (#".clp")
     #:00A300
     #hasheq((ace_mode . text) (tm_scope . source.clips)))
    (47
     "CMake"
     programming
     (#".cmake" #".cmake.in")
     #:DA3434
     #hasheq((ace_mode . text)
             (codemirror_mode . cmake)
             (filenames . ("CMakeLists.txt"))
             (tm_scope . source.cmake)))
    (48
     "COBOL"
     programming
     (#".cob" #".cbl" #".ccp" #".cobol" #".cpy")
     #f
     #hasheq((ace_mode . cobol)
             (codemirror_mode . cobol)
             (tm_scope . source.cobol)))
    (321684729
     "CODEOWNERS"
     data
     (#"")
     #f
     #hasheq((ace_mode . gitignore)
             (filenames . ("CODEOWNERS"))
             (tm_scope . text.codeowners)))
    (49
     "COLLADA"
     data
     (#".dae")
     #:F1A42B
     #hasheq((ace_mode . xml) (codemirror_mode . xml) (tm_scope . text.xml)))
    (424
     "CSON"
     data
     (#".cson")
     #:244776
     #hasheq((ace_mode . coffee)
             (codemirror_mode . coffeescript)
             (tm_scope . source.coffee)))
    (50
     "CSS"
     markup
     (#".css")
     #:563d7c
     #hasheq((ace_mode . css) (codemirror_mode . css) (tm_scope . source.css)))
    (51
     "CSV"
     data
     (#".csv")
     #:237346
     #hasheq((ace_mode . text) (tm_scope . none)))
    (356063509
     "CUE"
     programming
     (#".cue")
     #:5886E1
     #hasheq((ace_mode . text) (tm_scope . source.cue)))
    (657332628
     "CWeb"
     programming
     (#".w")
     #:00007a
     #hasheq((ace_mode . text) (tm_scope . none)))
    (677095381
     "Cabal Config"
     data
     (#".cabal")
     #:483465
     #hasheq((ace_mode . haskell)
             (aliases . ("Cabal"))
             (codemirror_mode . haskell)
             (filenames . ("cabal.config" "cabal.project"))
             (tm_scope . source.cabal)))
    (270184138
     "Cadence"
     programming
     (#".cdc")
     #:00ef8b
     #hasheq((ace_mode . text) (tm_scope . source.cadence)))
    (620599567
     "Cairo"
     programming
     (#".cairo")
     #:ff4a48
     #hasheq((ace_mode . text) (tm_scope . source.cairo)))
    (829207807
     "CameLIGO"
     programming
     (#".mligo")
     #:3be133
     #hasheq((ace_mode . ocaml)
             (codemirror_mode . mllike)
             (group . " LigoLANG")
             (tm_scope . source.mligo)))
    (52
     "Cap'n Proto"
     programming
     (#".capnp")
     #:c42727
     #hasheq((ace_mode . text) (tm_scope . source.capnp)))
    (53
     "CartoCSS"
     programming
     (#".mss")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("Carto"))
             (tm_scope . source.css.mss)))
    (54
     "Ceylon"
     programming
     (#".ceylon")
     #:dfa535
     #hasheq((ace_mode . text) (tm_scope . source.ceylon)))
    (55
     "Chapel"
     programming
     (#".chpl")
     #:8dc63f
     #hasheq((ace_mode . text)
             (aliases . ("chpl"))
             (tm_scope . source.chapel)))
    (56
     "Charity"
     programming
     (#".ch")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (372063053
     "Checksums"
     data
     (#".crc32"
      #".md2"
      #".md4"
      #".md5"
      #".sha1"
      #".sha2"
      #".sha224"
      #".sha256"
      #".sha256sum"
      #".sha3"
      #".sha384"
      #".sha512")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("checksum" "hash" "hashes" "sum" "sums"))
             (filenames
              .
              ("MD5SUMS"
               "SHA1SUMS"
               "SHA256SUMS"
               "SHA256SUMS.txt"
               "SHA512SUMS"
               "checksums.txt"
               "cksums"
               "md5sum.txt"))
             (tm_scope . text.checksums)))
    (57
     "ChucK"
     programming
     (#".ck")
     #:3f8000
     #hasheq((ace_mode . java)
             (codemirror_mode . clike)
             (tm_scope . source.java)))
    (58
     "Cirru"
     programming
     (#".cirru")
     #:ccccff
     #hasheq((ace_mode . cirru) (tm_scope . source.cirru)))
    (59
     "Clarion"
     programming
     (#".clw")
     #:db901e
     #hasheq((ace_mode . text) (tm_scope . source.clarion)))
    (91493841
     "Clarity"
     programming
     (#".clar")
     #:5546ff
     #hasheq((ace_mode . lisp) (tm_scope . source.clar)))
    (8
     "Classic ASP"
     programming
     (#".asp")
     #:6a40fd
     #hasheq((ace_mode . text) (aliases . ("asp")) (tm_scope . text.html.asp)))
    (60
     "Clean"
     programming
     (#".icl" #".dcl")
     #:3F85AF
     #hasheq((ace_mode . text) (tm_scope . source.clean)))
    (61
     "Click"
     programming
     (#".click")
     #:E4E6F3
     #hasheq((ace_mode . text) (tm_scope . source.click)))
    (62
     "Clojure"
     programming
     (#".clj"
      #".bb"
      #".boot"
      #".cl2"
      #".cljc"
      #".cljs"
      #".cljs.hl"
      #".cljscm"
      #".cljx"
      #".hic")
     #:db5855
     #hasheq((ace_mode . clojure)
             (codemirror_mode . clojure)
             (filenames . ("riemann.config"))
             (interpreters . (bb))
             (tm_scope . source.clojure)))
    (357046146
     "Closure Templates"
     markup
     (#".soy")
     #:0d948f
     #hasheq((ace_mode . soy_template)
             (aliases . ("soy"))
             (codemirror_mode . soy)
             (tm_scope . text.html.soy)))
    (407996372
     "Cloud Firestore Security Rules"
     data
     (#"")
     #:FFA000
     #hasheq((ace_mode . less)
             (codemirror_mode . css)
             (filenames . ("firestore.rules"))
             (tm_scope . source.firestore)))
    (421026389
     "CoNLL-U"
     data
     (#".conllu" #".conll")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("CoNLL" "CoNLL-X"))
             (tm_scope . text.conllu)))
    (424259634
     "CodeQL"
     programming
     (#".ql" #".qll")
     #:140f46
     #hasheq((ace_mode . text) (aliases . ("ql")) (tm_scope . source.ql)))
    (63
     "CoffeeScript"
     programming
     (#".coffee" #"._coffee" #".cake" #".cjsx" #".iced")
     #:244776
     #hasheq((ace_mode . coffee)
             (aliases . ("coffee" "coffee-script"))
             (codemirror_mode . coffeescript)
             (filenames . ("Cakefile"))
             (interpreters . (coffee))
             (tm_scope . source.coffee)))
    (64
     "ColdFusion"
     programming
     (#".cfm" #".cfml")
     #:ed2cd6
     #hasheq((ace_mode . coldfusion)
             (aliases . ("cfm" "cfml" "coldfusion html"))
             (tm_scope . text.html.cfm)))
    (65
     "ColdFusion CFC"
     programming
     (#".cfc")
     #:ed2cd6
     #hasheq((ace_mode . coldfusion)
             (aliases . ("cfc"))
             (group . " ColdFusion")
             (tm_scope . source.cfscript)))
    (66
     "Common Lisp"
     programming
     (#".lisp" #".asd" #".cl" #".l" #".lsp" #".ny" #".podsl" #".sexp")
     #:3fb68b
     #hasheq((ace_mode . lisp)
             (aliases . ("lisp"))
             (codemirror_mode . commonlisp)
             (interpreters . (lisp sbcl ccl clisp ecl))
             (tm_scope . source.lisp)))
    (988547172
     "Common Workflow Language"
     programming
     (#".cwl")
     #:B5314C
     #hasheq((ace_mode . yaml)
             (aliases . ("cwl"))
             (codemirror_mode . yaml)
             (interpreters . (cwl-runner))
             (tm_scope . source.cwl)))
    (67
     "Component Pascal"
     programming
     (#".cp" #".cps")
     #:B0CE4E
     #hasheq((ace_mode . pascal)
             (codemirror_mode . pascal)
             (tm_scope . source.pascal)))
    (68
     "Cool"
     programming
     (#".cl")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.cool)))
    (69
     "Coq"
     programming
     (#".coq" #".v")
     #:d0b68c
     #hasheq((ace_mode . text) (tm_scope . source.coq)))
    (70
     "Cpp-ObjDump"
     data
     (#".cppobjdump"
      #".c++-objdump"
      #".c++objdump"
      #".cpp-objdump"
      #".cxx-objdump")
     #f
     #hasheq((ace_mode . assembly_x86)
             (aliases . ("c++-objdump"))
             (tm_scope . objdump.x86asm)))
    (71
     "Creole"
     prose
     (#".creole")
     #f
     #hasheq((ace_mode . text) (tm_scope . text.html.creole) (wrap . true)))
    (72
     "Crystal"
     programming
     (#".cr")
     #:000100
     #hasheq((ace_mode . ruby)
             (codemirror_mode . crystal)
             (interpreters . (crystal))
             (tm_scope . source.crystal)))
    (73
     "Csound"
     programming
     (#".orc" #".udo")
     #:1a1a1a
     #hasheq((ace_mode . csound_orchestra)
             (aliases . ("csound-orc"))
             (tm_scope . source.csound)))
    (74
     "Csound Document"
     programming
     (#".csd")
     #:1a1a1a
     #hasheq((ace_mode . csound_document)
             (aliases . ("csound-csd"))
             (tm_scope . source.csound-document)))
    (75
     "Csound Score"
     programming
     (#".sco")
     #:1a1a1a
     #hasheq((ace_mode . csound_score)
             (aliases . ("csound-sco"))
             (tm_scope . source.csound-score)))
    (77
     "Cuda"
     programming
     (#".cu" #".cuh")
     #:3A4E3A
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.cuda-c++)))
    (942714150
     "Cue Sheet"
     data
     (#".cue")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.cuesheet)))
    (439829048
     "Curry"
     programming
     (#".curry")
     #:531242
     #hasheq((ace_mode . haskell) (tm_scope . source.curry)))
    (78
     "Cycript"
     programming
     (#".cy")
     #f
     #hasheq((ace_mode . javascript)
             (codemirror_mode . javascript)
             (tm_scope . source.js)))
    (850806976
     "Cypher"
     programming
     (#".cyp" #".cypher")
     #:34c0eb
     #hasheq((ace_mode . text) (tm_scope . source.cypher)))
    (79
     "Cython"
     programming
     (#".pyx" #".pxd" #".pxi")
     #:fedf5b
     #hasheq((ace_mode . text)
             (aliases . ("pyrex"))
             (codemirror_mode . python)
             (tm_scope . source.cython)))
    (80
     "D"
     programming
     (#".d" #".di")
     #:ba595e
     #hasheq((ace_mode . d)
             (aliases . ("Dlang"))
             (codemirror_mode . d)
             (tm_scope . source.d)))
    (81
     "D-ObjDump"
     data
     (#".d-objdump")
     #f
     #hasheq((ace_mode . assembly_x86) (tm_scope . objdump.x86asm)))
    (82
     "DIGITAL Command Language"
     programming
     (#".com")
     #f
     #hasheq((ace_mode . text) (aliases . ("dcl")) (tm_scope . none)))
    (83
     "DM"
     programming
     (#".dm")
     #:447265
     #hasheq((ace_mode . c_cpp) (aliases . ("byond")) (tm_scope . source.dm)))
    (84
     "DNS Zone"
     data
     (#".zone" #".arpa")
     #f
     #hasheq((ace_mode . text) (tm_scope . text.zone_file)))
    (85
     "DTrace"
     programming
     (#".d")
     #f
     #hasheq((ace_mode . c_cpp)
             (aliases . ("dtrace-script"))
             (codemirror_mode . clike)
             (interpreters . (dtrace))
             (tm_scope . source.c)))
    (969323346
     "Dafny"
     programming
     (#".dfy")
     #:FFEC25
     #hasheq((ace_mode . text)
             (interpreters . (dafny))
             (tm_scope . text.dfy.dafny)))
    (86
     "Darcs Patch"
     data
     (#".darcspatch" #".dpatch")
     #:8eff23
     #hasheq((ace_mode . text) (aliases . ("dpatch")) (tm_scope . none)))
    (87
     "Dart"
     programming
     (#".dart")
     #:00B4AB
     #hasheq((ace_mode . dart)
             (codemirror_mode . dart)
             (interpreters . (dart))
             (tm_scope . source.dart)))
    (974514097
     "DataWeave"
     programming
     (#".dwl")
     #:003a52
     #hasheq((ace_mode . text) (tm_scope . source.data-weave)))
    (527438264
     "Debian Package Control File"
     data
     (#".dsc")
     #:D70751
     #hasheq((ace_mode . text) (tm_scope . source.deb-control)))
    (435000929
     "DenizenScript"
     programming
     (#".dsc")
     #:FBEE96
     #hasheq((ace_mode . yaml)
             (codemirror_mode . yaml)
             (tm_scope . source.denizenscript)))
    (793969321
     "Dhall"
     programming
     (#".dhall")
     #:dfafff
     #hasheq((ace_mode . haskell)
             (codemirror_mode . haskell)
             (tm_scope . source.haskell)))
    (88
     "Diff"
     data
     (#".diff" #".patch")
     #f
     #hasheq((ace_mode . diff)
             (aliases . ("udiff"))
             (codemirror_mode . diff)
             (tm_scope . source.diff)))
    (201049282
     "DirectX 3D File"
     data
     (#".x")
     #:aace60
     #hasheq((ace_mode . text) (tm_scope . none)))
    (89
     "Dockerfile"
     programming
     (#".dockerfile")
     #:384d54
     #hasheq((ace_mode . dockerfile)
             (aliases . ("Containerfile"))
             (codemirror_mode . dockerfile)
             (filenames . ("Containerfile" "Dockerfile"))
             (tm_scope . source.dockerfile)))
    (90
     "Dogescript"
     programming
     (#".djs")
     #:cca760
     #hasheq((ace_mode . text) (tm_scope . none)))
    (91
     "Dylan"
     programming
     (#".dylan" #".dyl" #".intr" #".lid")
     #:6c616e
     #hasheq((ace_mode . text)
             (codemirror_mode . dylan)
             (tm_scope . source.dylan)))
    (92
     "E"
     programming
     (#".e")
     #:ccce35
     #hasheq((ace_mode . text) (interpreters . (rune)) (tm_scope . none)))
    (529653389
     "E-mail"
     data
     (#".eml" #".mbox")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("email" "eml" "mail" "mbox"))
             (codemirror_mode . mbox)
             (tm_scope . text.eml.basic)))
    (430
     "EBNF"
     data
     (#".ebnf")
     #f
     #hasheq((ace_mode . text)
             (codemirror_mode . ebnf)
             (tm_scope . source.ebnf)))
    (93
     "ECL"
     programming
     (#".ecl" #".eclxml")
     #:8a1267
     #hasheq((ace_mode . text)
             (codemirror_mode . ecl)
             (tm_scope . source.ecl)))
    (94
     "ECLiPSe"
     programming
     (#".ecl")
     #:001d9d
     #hasheq((ace_mode . prolog)
             (group . " prolog")
             (tm_scope . source.prolog.eclipse)))
    (95
     "EJS"
     markup
     (#".ejs" #".ect" #".ejs.t" #".jst")
     #:a91e50
     #hasheq((ace_mode . ejs) (tm_scope . text.html.js)))
    (96
     "EQ"
     programming
     (#".eq")
     #:a78649
     #hasheq((ace_mode . csharp)
             (codemirror_mode . clike)
             (tm_scope . source.cs)))
    (97
     "Eagle"
     data
     (#".sch" #".brd")
     #f
     #hasheq((ace_mode . xml) (codemirror_mode . xml) (tm_scope . text.xml)))
    (963512632
     "Earthly"
     programming
     (#"")
     #:2af0ff
     #hasheq((ace_mode . text)
             (aliases . ("Earthfile"))
             (filenames . ("Earthfile"))
             (tm_scope . source.earthfile)))
    (342840477
     "Easybuild"
     data
     (#".eb")
     #:069406
     #hasheq((ace_mode . python)
             (codemirror_mode . python)
             (group . " Python")
             (tm_scope . source.python)))
    (98
     "Ecere Projects"
     data
     (#".epj")
     #:913960
     #hasheq((ace_mode . json)
             (codemirror_mode . javascript)
             (group . " JavaScript")
             (tm_scope . source.json)))
    (844766630
     "Ecmarkup"
     markup
     (#".html")
     #:eb8131
     #hasheq((ace_mode . html)
             (aliases . ("ecmarkdown"))
             (codemirror_mode . htmlmixed)
             (group . " HTML")
             (tm_scope . text.html.ecmarkup)))
    (96139566
     "EditorConfig"
     data
     (#".editorconfig")
     #:fff1f2
     #hasheq((ace_mode . ini)
             (aliases . ("editor-config"))
             (codemirror_mode . properties)
             (filenames . (".editorconfig"))
             (group . " INI")
             (tm_scope . source.editorconfig)))
    (342840478
     "Edje Data Collection"
     data
     (#".edc")
     #f
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.c++)))
    (99
     "Eiffel"
     programming
     (#".e")
     #:4d6977
     #hasheq((ace_mode . eiffel)
             (codemirror_mode . eiffel)
             (tm_scope . source.eiffel)))
    (100
     "Elixir"
     programming
     (#".ex" #".exs")
     #:6e4a7e
     #hasheq((ace_mode . elixir)
             (filenames . ("mix.lock"))
             (interpreters . (elixir))
             (tm_scope . source.elixir)))
    (101
     "Elm"
     programming
     (#".elm")
     #:60B5CC
     #hasheq((ace_mode . elm) (codemirror_mode . elm) (tm_scope . source.elm)))
    (570996448
     "Elvish"
     programming
     (#".elv")
     #:55BB55
     #hasheq((ace_mode . text)
             (interpreters . (elvish))
             (tm_scope . source.elvish)))
    (102
     "Emacs Lisp"
     programming
     (#".el" #".emacs" #".emacs.desktop")
     #:c065db
     #hasheq((ace_mode . lisp)
             (aliases . ("elisp" "emacs"))
             (codemirror_mode . commonlisp)
             (filenames
              .
              (".abbrev_defs"
               ".emacs"
               ".emacs.desktop"
               ".gnus"
               ".spacemacs"
               ".viper"
               "Cask"
               "Project.ede"
               "_emacs"
               "abbrev_defs"))
             (tm_scope . source.emacs.lisp)))
    (103
     "EmberScript"
     programming
     (#".em" #".emberscript")
     #:FFF4F3
     #hasheq((ace_mode . coffee)
             (codemirror_mode . coffeescript)
             (tm_scope . source.coffee)))
    (104
     "Erlang"
     programming
     (#".erl" #".app.src" #".es" #".escript" #".hrl" #".xrl" #".yrl")
     #:B83998
     #hasheq((ace_mode . erlang)
             (codemirror_mode . erlang)
             (filenames
              .
              ("Emakefile" "rebar.config" "rebar.config.lock" "rebar.lock"))
             (interpreters . (escript))
             (tm_scope . source.erlang)))
    (880693982
     "Euphoria"
     programming
     (#".e" #".ex")
     #:FF790B
     #hasheq((ace_mode . text)
             (interpreters . (eui euiw))
             (tm_scope . source.euphoria)))
    (105
     "F#"
     programming
     (#".fs" #".fsi" #".fsx")
     #:b845fc
     #hasheq((ace_mode . text)
             (aliases . ("fsharp"))
             (codemirror_mode . mllike)
             (tm_scope . source.fsharp)))
    (336943375
     "F*"
     programming
     (#".fst" #".fsti")
     #:572e30
     #hasheq((ace_mode . text)
             (aliases . ("fstar"))
             (fs_name . " Fstar")
             (tm_scope . source.fstar)))
    (686129783
     "FIGlet Font"
     data
     (#".flf")
     #:FFDDBB
     #hasheq((ace_mode . text)
             (aliases . ("FIGfont"))
             (tm_scope . source.figfont)))
    (106
     "FLUX"
     programming
     (#".fx" #".flux")
     #:88ccff
     #hasheq((ace_mode . text) (tm_scope . none)))
    (108
     "Factor"
     programming
     (#".factor")
     #:636746
     #hasheq((ace_mode . text)
             (codemirror_mode . factor)
             (filenames . (".factor-boot-rc" ".factor-rc"))
             (tm_scope . source.factor)))
    (109
     "Fancy"
     programming
     (#".fy" #".fancypack")
     #:7b9db4
     #hasheq((ace_mode . text)
             (filenames . ("Fakefile"))
             (tm_scope . source.fancy)))
    (110
     "Fantom"
     programming
     (#".fan")
     #:14253c
     #hasheq((ace_mode . text) (tm_scope . source.fan)))
    (622529198
     "Faust"
     programming
     (#".dsp")
     #:c37240
     #hasheq((ace_mode . text) (tm_scope . source.faust)))
    (239946126
     "Fennel"
     programming
     (#".fnl")
     #:fff3d7
     #hasheq((ace_mode . text)
             (interpreters . (fennel))
             (tm_scope . source.fnl)))
    (111
     "Filebench WML"
     programming
     (#".f")
     #:F6B900
     #hasheq((ace_mode . text) (tm_scope . none)))
    (112
     "Filterscript"
     programming
     (#".fs")
     #f
     #hasheq((ace_mode . text) (group . " RenderScript") (tm_scope . none)))
    (206353404
     "Fluent"
     programming
     (#".ftl")
     #:ffcc33
     #hasheq((ace_mode . text) (tm_scope . source.ftl)))
    (113
     "Formatted"
     data
     (#".for" #".eam.fs")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (114
     "Forth"
     programming
     (#".fth" #".4th" #".f" #".for" #".forth" #".fr" #".frt" #".fs")
     #:341708
     #hasheq((ace_mode . forth)
             (codemirror_mode . forth)
             (tm_scope . source.forth)))
    (107
     "Fortran"
     programming
     (#".f" #".f77" #".for" #".fpp")
     #:4d41b1
     #hasheq((ace_mode . text)
             (codemirror_mode . fortran)
             (group . " Fortran")
             (tm_scope . source.fortran)))
    (761352333
     "Fortran Free Form"
     programming
     (#".f90" #".f03" #".f08" #".f95")
     #:4d41b1
     #hasheq((ace_mode . text)
             (codemirror_mode . fortran)
             (group . " Fortran")
             (tm_scope . source.fortran.modern)))
    (472896659
     "FreeBasic"
     programming
     (#".bi" #".bas")
     #:867db1
     #hasheq((ace_mode . text)
             (aliases . ("fb"))
             (codemirror_mode . vb)
             (tm_scope . source.vbnet)))
    (115
     "FreeMarker"
     programming
     (#".ftl")
     #:0050b2
     #hasheq((ace_mode . ftl) (aliases . ("ftl")) (tm_scope . text.html.ftl)))
    (116
     "Frege"
     programming
     (#".fr")
     #:00cafe
     #hasheq((ace_mode . haskell) (tm_scope . source.haskell)))
    (97358117
     "Futhark"
     programming
     (#".fut")
     #:5f021f
     #hasheq((ace_mode . text) (tm_scope . source.futhark)))
    (117
     "G-code"
     programming
     (#".g" #".cnc" #".gco" #".gcode")
     #:D08CF2
     #hasheq((ace_mode . gcode) (tm_scope . source.gcode)))
    (290345951
     "GAML"
     programming
     (#".gaml")
     #:FFC766
     #hasheq((ace_mode . text) (tm_scope . none)))
    (118
     "GAMS"
     programming
     (#".gms")
     #:f49a22
     #hasheq((ace_mode . text) (tm_scope . none)))
    (119
     "GAP"
     programming
     (#".g" #".gap" #".gd" #".gi" #".tst")
     #:0000cc
     #hasheq((ace_mode . text) (tm_scope . source.gap)))
    (121
     "GCC Machine Description"
     programming
     (#".md")
     #:FFCFAB
     #hasheq((ace_mode . lisp)
             (codemirror_mode . commonlisp)
             (tm_scope . source.lisp)))
    (122
     "GDB"
     programming
     (#".gdb" #".gdbinit")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.gdb)))
    (123
     "GDScript"
     programming
     (#".gd")
     #:355570
     #hasheq((ace_mode . text) (tm_scope . source.gdscript)))
    (459577965
     "GEDCOM"
     data
     (#".ged")
     #:003058
     #hasheq((ace_mode . text) (tm_scope . source.gedcom)))
    (124
     "GLSL"
     programming
     (#".glsl"
      #".fp"
      #".frag"
      #".frg"
      #".fs"
      #".fsh"
      #".fshader"
      #".geo"
      #".geom"
      #".glslf"
      #".glslv"
      #".gs"
      #".gshader"
      #".rchit"
      #".rmiss"
      #".shader"
      #".tesc"
      #".tese"
      #".vert"
      #".vrx"
      #".vsh"
      #".vshader")
     #:5686a5
     #hasheq((ace_mode . glsl) (tm_scope . source.glsl)))
    (302957008
     "GN"
     data
     (#".gn" #".gni")
     #f
     #hasheq((ace_mode . python)
             (codemirror_mode . python)
             (filenames . (".gn"))
             (interpreters . (gn))
             (tm_scope . source.gn)))
    (257856279
     "GSC"
     programming
     (#".gsc" #".csc" #".gsh")
     #:FF6800
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.gsc)))
    (125
     "Game Maker Language"
     programming
     (#".gml")
     #:71b417
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.c++)))
    (907065713
     "Gemfile.lock"
     data
     (#"")
     #:701516
     #hasheq((ace_mode . text)
             (filenames . ("Gemfile.lock"))
             (tm_scope . source.gemfile-lock)))
    (310828396
     "Gemini"
     prose
     (#".gmi")
     #:ff6900
     #hasheq((ace_mode . text)
             (aliases . ("gemtext"))
             (tm_scope . source.gemini)
             (wrap . true)))
    (986054050
     "Genero"
     programming
     (#".4gl")
     #:63408e
     #hasheq((ace_mode . text) (tm_scope . source.genero)))
    (902995658
     "Genero Forms"
     markup
     (#".per")
     #:d8df39
     #hasheq((ace_mode . text) (tm_scope . source.genero-forms)))
    (792408528
     "Genie"
     programming
     (#".gs")
     #:fb855d
     #hasheq((ace_mode . text) (tm_scope . none)))
    (126
     "Genshi"
     programming
     (#".kid")
     #:951531
     #hasheq((ace_mode . xml)
             (aliases . ("xml+genshi" "xml+kid"))
             (codemirror_mode . xml)
             (tm_scope . text.xml.genshi)))
    (127
     "Gentoo Ebuild"
     programming
     (#".ebuild")
     #:9400ff
     #hasheq((ace_mode . sh)
             (codemirror_mode . shell)
             (group . " Shell")
             (tm_scope . source.shell)))
    (128
     "Gentoo Eclass"
     programming
     (#".eclass")
     #:9400ff
     #hasheq((ace_mode . sh)
             (codemirror_mode . shell)
             (group . " Shell")
             (tm_scope . source.shell)))
    (404627610
     "Gerber Image"
     data
     (#".gbr"
      #".cmp"
      #".gbl"
      #".gbo"
      #".gbp"
      #".gbs"
      #".gko"
      #".gml"
      #".gpb"
      #".gpt"
      #".gtl"
      #".gto"
      #".gtp"
      #".gts"
      #".ncl"
      #".sol")
     #:d20b00
     #hasheq((ace_mode . text)
             (aliases . ("rs-274x"))
             (interpreters . (gerbv gerbview))
             (tm_scope . source.gerber)))
    (129
     "Gettext Catalog"
     prose
     (#".po" #".pot")
     #f
     #hasheq((ace_mode . text) (aliases . ("pot")) (tm_scope . source.po)))
    (76
     "Gherkin"
     programming
     (#".feature" #".story")
     #:5B2063
     #hasheq((ace_mode . text)
             (aliases . ("cucumber"))
             (tm_scope . text.gherkin.feature)))
    (956324166
     "Git Attributes"
     data
     (#"")
     #:F44D27
     #hasheq((ace_mode . gitignore)
             (aliases . ("gitattributes"))
             (codemirror_mode . shell)
             (filenames . (".gitattributes"))
             (group . " INI")
             (tm_scope . source.gitattributes)))
    (807968997
     "Git Config"
     data
     (#".gitconfig")
     #:F44D27
     #hasheq((ace_mode . ini)
             (aliases . ("gitconfig" "gitmodules"))
             (codemirror_mode . properties)
             (filenames . (".gitconfig" ".gitmodules"))
             (group . " INI")
             (tm_scope . source.gitconfig)))
    (461881235
     "Git Revision List"
     data
     (#"")
     #:F44D27
     #hasheq((ace_mode . text)
             (aliases . ("Git Blame Ignore Revs"))
             (filenames . (".git-blame-ignore-revs"))
             (tm_scope . source.git-revlist)))
    (1054258749
     "Gleam"
     programming
     (#".gleam")
     #:ffaff3
     #hasheq((ace_mode . text) (tm_scope . source.gleam)))
    (130
     "Glyph"
     programming
     (#".glf")
     #:c1ac7f
     #hasheq((ace_mode . tcl) (codemirror_mode . tcl) (tm_scope . source.tcl)))
    (997665271
     "Glyph Bitmap Distribution Format"
     data
     (#".bdf")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.bdf)))
    (131
     "Gnuplot"
     programming
     (#".gp" #".gnu" #".gnuplot" #".p" #".plot" #".plt")
     #:f0a9f0
     #hasheq((ace_mode . text)
             (interpreters . (gnuplot))
             (tm_scope . source.gnuplot)))
    (132
     "Go"
     programming
     (#".go")
     #:00ADD8
     #hasheq((ace_mode . golang)
             (aliases . ("golang"))
             (codemirror_mode . go)
             (tm_scope . source.go)))
    (1054391671
     "Go Checksums"
     data
     (#"")
     #:00ADD8
     #hasheq((ace_mode . text)
             (aliases . ("go.sum" "go sum"))
             (filenames . ("go.sum"))
             (tm_scope . go.sum)))
    (947461016
     "Go Module"
     data
     (#"")
     #:00ADD8
     #hasheq((ace_mode . text)
             (aliases . ("go.mod" "go mod"))
             (filenames . ("go.mod"))
             (tm_scope . go.mod)))
    (133
     "Golo"
     programming
     (#".golo")
     #:88562A
     #hasheq((ace_mode . text) (tm_scope . source.golo)))
    (134
     "Gosu"
     programming
     (#".gs" #".gst" #".gsx" #".vark")
     #:82937f
     #hasheq((ace_mode . text) (tm_scope . source.gosu.2)))
    (135
     "Grace"
     programming
     (#".grace")
     #:615f8b
     #hasheq((ace_mode . text) (tm_scope . source.grace)))
    (136
     "Gradle"
     data
     (#".gradle")
     #:02303a
     #hasheq((ace_mode . text) (tm_scope . source.groovy.gradle)))
    (137
     "Grammatical Framework"
     programming
     (#".gf")
     #:ff0000
     #hasheq((ace_mode . haskell)
             (aliases . ("gf"))
             (codemirror_mode . haskell)
             (tm_scope . source.gf)))
    (138
     "Graph Modeling Language"
     data
     (#".gml")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (139
     "GraphQL"
     data
     (#".graphql" #".gql" #".graphqls")
     #:e10098
     #hasheq((ace_mode . text) (tm_scope . source.graphql)))
    (140
     "Graphviz (DOT)"
     data
     (#".dot" #".gv")
     #:2596be
     #hasheq((ace_mode . text) (tm_scope . source.dot)))
    (142
     "Groovy"
     programming
     (#".groovy" #".grt" #".gtpl" #".gvy")
     #:4298b8
     #hasheq((ace_mode . groovy)
             (codemirror_mode . groovy)
             (filenames . ("Jenkinsfile"))
             (interpreters . (groovy))
             (tm_scope . source.groovy)))
    (143
     "Groovy Server Pages"
     programming
     (#".gsp")
     #:4298b8
     #hasheq((ace_mode . jsp)
             (aliases . ("gsp" "java server page"))
             (codemirror_mode . htmlembedded)
             (group . " Groovy")
             (tm_scope . text.html.jsp)))
    (366607477
     "HAProxy"
     data
     (#".cfg")
     #:106da9
     #hasheq((ace_mode . text)
             (filenames . ("haproxy.cfg"))
             (tm_scope . source.haproxy-config)))
    (144
     "HCL"
     programming
     (#".hcl" #".nomad" #".tf" #".tfvars" #".workflow")
     #f
     #hasheq((ace_mode . ruby)
             (aliases . ("HashiCorp Configuration Language" "terraform"))
             (codemirror_mode . ruby)
             (tm_scope . source.terraform)))
    (145
     "HLSL"
     programming
     (#".hlsl" #".cginc" #".fx" #".fxh" #".hlsli")
     #:aace60
     #hasheq((ace_mode . text) (tm_scope . source.hlsl)))
    (679725279
     "HOCON"
     data
     (#".hocon")
     #:9ff8ee
     #hasheq((ace_mode . text) (tm_scope . source.hocon)))
    (146
     "HTML"
     markup
     (#".html" #".hta" #".htm" #".html.hl" #".inc" #".xht" #".xhtml")
     #:e34c26
     #hasheq((ace_mode . html)
             (aliases . ("xhtml"))
             (codemirror_mode . htmlmixed)
             (tm_scope . text.html.basic)))
    (148
     "HTML+ECR"
     markup
     (#".ecr")
     #:2e1052
     #hasheq((ace_mode . text)
             (aliases . ("ecr"))
             (codemirror_mode . htmlmixed)
             (group . " HTML")
             (tm_scope . text.html.ecr)))
    (149
     "HTML+EEX"
     markup
     (#".eex" #".html.heex" #".html.leex")
     #:6e4a7e
     #hasheq((ace_mode . text)
             (aliases . ("eex" "heex" "leex"))
             (codemirror_mode . htmlmixed)
             (group . " HTML")
             (tm_scope . text.html.elixir)))
    (150
     "HTML+ERB"
     markup
     (#".erb" #".erb.deface" #".rhtml")
     #:701516
     #hasheq((ace_mode . text)
             (aliases . ("erb" "rhtml" "html+ruby"))
             (codemirror_mode . htmlembedded)
             (group . " HTML")
             (tm_scope . text.html.erb)))
    (151
     "HTML+PHP"
     markup
     (#".phtml")
     #:4f5d95
     #hasheq((ace_mode . php)
             (codemirror_mode . php)
             (group . " HTML")
             (tm_scope . text.html.php)))
    (479039817
     "HTML+Razor"
     markup
     (#".cshtml" #".razor")
     #:512be4
     #hasheq((ace_mode . razor)
             (aliases . ("razor"))
             (codemirror_mode . htmlmixed)
             (group . " HTML")
             (tm_scope . text.html.cshtml)))
    (152
     "HTTP"
     data
     (#".http")
     #:005C9C
     #hasheq((ace_mode . text)
             (codemirror_mode . http)
             (tm_scope . source.httpspec)))
    (786683730
     "HXML"
     data
     (#".hxml")
     #:f68712
     #hasheq((ace_mode . text) (tm_scope . source.hxml)))
    (153
     "Hack"
     programming
     (#".hack" #".hh" #".hhi" #".php")
     #:878787
     #hasheq((ace_mode . php)
             (codemirror_mode . php)
             (tm_scope . source.hack)))
    (154
     "Haml"
     markup
     (#".haml" #".haml.deface")
     #:ece2a9
     #hasheq((ace_mode . haml)
             (codemirror_mode . haml)
             (tm_scope . text.haml)))
    (155
     "Handlebars"
     markup
     (#".handlebars" #".hbs")
     #:f7931e
     #hasheq((ace_mode . handlebars)
             (aliases . ("hbs" "htmlbars"))
             (tm_scope . text.html.handlebars)))
    (156
     "Harbour"
     programming
     (#".hb")
     #:0e60e3
     #hasheq((ace_mode . text) (tm_scope . source.harbour)))
    (157
     "Haskell"
     programming
     (#".hs" #".hs-boot" #".hsc")
     #:5e5086
     #hasheq((ace_mode . haskell)
             (codemirror_mode . haskell)
             (interpreters . (runghc runhaskell runhugs))
             (tm_scope . source.haskell)))
    (158
     "Haxe"
     programming
     (#".hx" #".hxsl")
     #:df7900
     #hasheq((ace_mode . haxe)
             (codemirror_mode . haxe)
             (tm_scope . source.hx)))
    (931814087
     "HiveQL"
     programming
     (#".q" #".hql")
     #:dce200
     #hasheq((ace_mode . sql) (tm_scope . source.hql)))
    (928121743
     "HolyC"
     programming
     (#".hc")
     #:ffefaf
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.hc)))
    (159
     "Hy"
     programming
     (#".hy")
     #:7790B2
     #hasheq((ace_mode . text)
             (aliases . ("hylang"))
             (interpreters . (hy))
             (tm_scope . source.hy)))
    (160
     "HyPhy"
     programming
     (#".bf")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (161
     "IDL"
     programming
     (#".pro" #".dlm")
     #:a3522f
     #hasheq((ace_mode . text)
             (codemirror_mode . idl)
             (tm_scope . source.idl)))
    (162
     "IGOR Pro"
     programming
     (#".ipf")
     #:0000cc
     #hasheq((ace_mode . text)
             (aliases . ("igor" "igorpro"))
             (tm_scope . source.igor)))
    (163
     "INI"
     data
     (#".ini"
      #".cfg"
      #".dof"
      #".lektorproject"
      #".prefs"
      #".pro"
      #".properties"
      #".url")
     #:d1dbe0
     #hasheq((ace_mode . ini)
             (aliases . ("dosini"))
             (codemirror_mode . properties)
             (filenames
              .
              (".coveragerc"
               ".flake8"
               ".pylintrc"
               "buildozer.spec"
               "pylintrc"))
             (tm_scope . source.ini)))
    (164
     "IRC log"
     data
     (#".irclog" #".weechatlog")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("irc" "irc logs"))
             (codemirror_mode . mirc)
             (tm_scope . none)))
    (165
     "Idris"
     programming
     (#".idr" #".lidr")
     #:b30000
     #hasheq((ace_mode . text) (tm_scope . source.idris)))
    (74444240
     "Ignore List"
     data
     (#".gitignore")
     #:000000
     #hasheq((ace_mode . gitignore)
             (aliases . ("ignore" "gitignore" "git-ignore"))
             (codemirror_mode . shell)
             (filenames
              .
              (".atomignore"
               ".babelignore"
               ".bzrignore"
               ".coffeelintignore"
               ".cvsignore"
               ".dockerignore"
               ".eleventyignore"
               ".eslintignore"
               ".gitignore"
               ".markdownlintignore"
               ".nodemonignore"
               ".npmignore"
               ".prettierignore"
               ".stylelintignore"
               ".vercelignore"
               ".vscodeignore"
               "gitignore-global"
               "gitignore_global"))
             (group . " INI")
             (tm_scope . source.gitignore)))
    (575143428
     "ImageJ Macro"
     programming
     (#".ijm")
     #:99AAFF
     #hasheq((ace_mode . text) (aliases . ("ijm")) (tm_scope . none)))
    (1057618448
     "Imba"
     programming
     (#".imba")
     #:16cec6
     #hasheq((ace_mode . text) (tm_scope . source.imba)))
    (166
     "Inform 7"
     programming
     (#".ni" #".i7x")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("i7" "inform7"))
             (tm_scope . source.inform7)
             (wrap . true)))
    (838252715
     "Ink"
     programming
     (#".ink")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.ink) (wrap . true)))
    (167
     "Inno Setup"
     programming
     (#".iss" #".isl")
     #:264b99
     #hasheq((ace_mode . text) (tm_scope . source.inno)))
    (168
     "Io"
     programming
     (#".io")
     #:a9188d
     #hasheq((ace_mode . io) (interpreters . (io)) (tm_scope . source.io)))
    (169
     "Ioke"
     programming
     (#".ik")
     #:078193
     #hasheq((ace_mode . text)
             (interpreters . (ioke))
             (tm_scope . source.ioke)))
    (170
     "Isabelle"
     programming
     (#".thy")
     #:FEFE00
     #hasheq((ace_mode . text) (tm_scope . source.isabelle.theory)))
    (171
     "Isabelle ROOT"
     programming
     (#"")
     #:FEFE00
     #hasheq((ace_mode . text)
             (filenames . ("ROOT"))
             (group . " Isabelle")
             (tm_scope . source.isabelle.root)))
    (172
     "J"
     programming
     (#".ijs")
     #:9EEDFF
     #hasheq((ace_mode . text)
             (interpreters . (jconsole))
             (tm_scope . source.j)))
    (447261135
     "JAR Manifest"
     data
     (#"")
     #:b07219
     #hasheq((ace_mode . text)
             (filenames . ("MANIFEST.MF"))
             (tm_scope . source.yaml)))
    (173
     "JFlex"
     programming
     (#".flex" #".jflex")
     #:DBCA00
     #hasheq((ace_mode . text) (group . " Lex") (tm_scope . source.jflex)))
    (174
     "JSON"
     data
     (#".json"
      #".4DForm"
      #".4DProject"
      #".avsc"
      #".geojson"
      #".gltf"
      #".har"
      #".ice"
      #".JSON-tmLanguage"
      #".jsonl"
      #".mcmeta"
      #".tfstate"
      #".tfstate.backup"
      #".topojson"
      #".webapp"
      #".webmanifest"
      #".yy"
      #".yyp")
     #:292929
     #hasheq((ace_mode . json)
             (aliases . ("geojson" "jsonl" "topojson"))
             (codemirror_mode . javascript)
             (filenames
              .
              (".all-contributorsrc"
               ".arcconfig"
               ".auto-changelog"
               ".c8rc"
               ".htmlhintrc"
               ".imgbotconfig"
               ".nycrc"
               ".tern-config"
               ".tern-project"
               ".watchmanconfig"
               "Pipfile.lock"
               "composer.lock"
               "mcmod.info"))
             (tm_scope . source.json)))
    (423
     "JSON with Comments"
     data
     (#".jsonc"
      #".code-snippets"
      #".sublime-build"
      #".sublime-commands"
      #".sublime-completions"
      #".sublime-keymap"
      #".sublime-macro"
      #".sublime-menu"
      #".sublime-mousemap"
      #".sublime-project"
      #".sublime-settings"
      #".sublime-theme"
      #".sublime-workspace"
      #".sublime_metrics"
      #".sublime_session")
     #:292929
     #hasheq((ace_mode . javascript)
             (aliases . ("jsonc"))
             (codemirror_mode . javascript)
             (filenames
              .
              (".babelrc"
               ".devcontainer.json"
               ".eslintrc.json"
               ".jscsrc"
               ".jshintrc"
               ".jslintrc"
               "api-extractor.json"
               "devcontainer.json"
               "jsconfig.json"
               "language-configuration.json"
               "tsconfig.json"
               "tslint.json"))
             (group . " JSON")
             (tm_scope . source.js)))
    (175
     "JSON5"
     data
     (#".json5")
     #:267CB9
     #hasheq((ace_mode . javascript)
             (codemirror_mode . javascript)
             (tm_scope . source.js)))
    (176
     "JSONLD"
     data
     (#".jsonld")
     #:0c479c
     #hasheq((ace_mode . javascript)
             (codemirror_mode . javascript)
             (tm_scope . source.js)))
    (177
     "JSONiq"
     programming
     (#".jq")
     #:40d47e
     #hasheq((ace_mode . jsoniq)
             (codemirror_mode . javascript)
             (tm_scope . source.jsoniq)))
    (1028705371
     "Janet"
     programming
     (#".janet")
     #:0886a5
     #hasheq((ace_mode . scheme)
             (codemirror_mode . scheme)
             (interpreters . (janet))
             (tm_scope . source.janet)))
    (180
     "Jasmin"
     programming
     (#".j")
     #:d03600
     #hasheq((ace_mode . java) (tm_scope . source.jasmin)))
    (181
     "Java"
     programming
     (#".java" #".jav" #".jsh")
     #:b07219
     #hasheq((ace_mode . java)
             (codemirror_mode . clike)
             (tm_scope . source.java)))
    (519377561
     "Java Properties"
     data
     (#".properties")
     #:2A6277
     #hasheq((ace_mode . properties)
             (codemirror_mode . properties)
             (tm_scope . source.java-properties)))
    (182
     "Java Server Pages"
     programming
     (#".jsp" #".tag")
     #:2A6277
     #hasheq((ace_mode . jsp)
             (aliases . ("jsp"))
             (codemirror_mode . htmlembedded)
             (group . " Java")
             (tm_scope . text.html.jsp)))
    (183
     "JavaScript"
     programming
     (#".js"
      #"._js"
      #".bones"
      #".cjs"
      #".es"
      #".es6"
      #".frag"
      #".gs"
      #".jake"
      #".javascript"
      #".jsb"
      #".jscad"
      #".jsfl"
      #".jslib"
      #".jsm"
      #".jspre"
      #".jss"
      #".jsx"
      #".mjs"
      #".njs"
      #".pac"
      #".sjs"
      #".ssjs"
      #".xsjs"
      #".xsjslib")
     #:f1e05a
     #hasheq((ace_mode . javascript)
             (aliases . ("js" "node"))
             (codemirror_mode . javascript)
             (filenames . ("Jakefile"))
             (interpreters
              .
              (chakra d8 gjs js node nodejs qjs rhino v8 v8-shell))
             (tm_scope . source.js)))
    (914318960
     "JavaScript+ERB"
     programming
     (#".js.erb")
     #:f1e05a
     #hasheq((ace_mode . javascript)
             (codemirror_mode . javascript)
             (group . " JavaScript")
             (tm_scope . source.js)))
    (774635084
     "Jest Snapshot"
     data
     (#".snap")
     #:15c213
     #hasheq((ace_mode . javascript)
             (codemirror_mode . javascript)
             (tm_scope . source.jest.snap)))
    (465165328
     "JetBrains MPS"
     programming
     (#".mps" #".mpl" #".msd")
     #:21D789
     #hasheq((ace_mode . xml)
             (aliases . ("mps"))
             (codemirror_mode . xml)
             (tm_scope . none)))
    (147
     "Jinja"
     markup
     (#".jinja" #".j2" #".jinja2")
     #:a52a22
     #hasheq((ace_mode . django)
             (aliases . ("django" "html+django" "html+jinja" "htmldjango"))
             (codemirror_mode . django)
             (tm_scope . text.html.django)))
    (284531423
     "Jison"
     programming
     (#".jison")
     #:56b3cb
     #hasheq((ace_mode . text) (group . " Yacc") (tm_scope . source.jison)))
    (406395330
     "Jison Lex"
     programming
     (#".jisonlex")
     #:56b3cb
     #hasheq((ace_mode . text) (group . " Lex") (tm_scope . source.jisonlex)))
    (998078858
     "Jolie"
     programming
     (#".ol" #".iol")
     #:843179
     #hasheq((ace_mode . text)
             (interpreters . (jolie))
             (tm_scope . source.jolie)))
    (664885656
     "Jsonnet"
     programming
     (#".jsonnet" #".libsonnet")
     #:0064bd
     #hasheq((ace_mode . text) (tm_scope . source.jsonnet)))
    (184
     "Julia"
     programming
     (#".jl")
     #:a270ba
     #hasheq((ace_mode . julia)
             (codemirror_mode . julia)
             (interpreters . (julia))
             (tm_scope . source.julia)))
    (185
     "Jupyter Notebook"
     markup
     (#".ipynb")
     #:DA5B0B
     #hasheq((ace_mode . json)
             (aliases . ("IPython Notebook"))
             (codemirror_mode . javascript)
             (filenames . ("Notebook"))
             (tm_scope . source.json)))
    (186
     "KRL"
     programming
     (#".krl")
     #:28430A
     #hasheq((ace_mode . text) (tm_scope . none)))
    (818804755
     "Kaitai Struct"
     programming
     (#".ksy")
     #:773b37
     #hasheq((ace_mode . yaml)
             (aliases . ("ksy"))
             (codemirror_mode . yaml)
             (tm_scope . source.yaml)))
    (603336474
     "KakouneScript"
     programming
     (#".kak")
     #:6f8042
     #hasheq((ace_mode . text)
             (aliases . ("kak" "kakscript"))
             (filenames . ("kakrc"))
             (tm_scope . source.kakscript)))
    (187
     "KiCad Layout"
     data
     (#".kicad_pcb" #".kicad_mod" #".kicad_wks")
     #:2f4aab
     #hasheq((ace_mode . lisp)
             (aliases . ("pcbnew"))
             (codemirror_mode . commonlisp)
             (filenames . ("fp-lib-table"))
             (tm_scope . source.pcb.sexp)))
    (140848857
     "KiCad Legacy Layout"
     data
     (#".brd")
     #:2f4aab
     #hasheq((ace_mode . text) (tm_scope . source.pcb.board)))
    (622447435
     "KiCad Schematic"
     data
     (#".kicad_sch" #".sch")
     #:2f4aab
     #hasheq((ace_mode . text)
             (aliases . ("eeschema schematic"))
             (tm_scope . source.pcb.schematic)))
    (188
     "Kit"
     markup
     (#".kit")
     #f
     #hasheq((ace_mode . html)
             (codemirror_mode . htmlmixed)
             (tm_scope . text.html.basic)))
    (189
     "Kotlin"
     programming
     (#".kt" #".ktm" #".kts")
     #:A97BFF
     #hasheq((ace_mode . text)
             (codemirror_mode . clike)
             (tm_scope . source.kotlin)))
    (225697190
     "Kusto"
     data
     (#".csl" #".kql")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.kusto)))
    (190
     "LFE"
     programming
     (#".lfe")
     #:4C3023
     #hasheq((ace_mode . lisp)
             (codemirror_mode . commonlisp)
             (tm_scope . source.lisp)))
    (191
     "LLVM"
     programming
     (#".ll")
     #:185619
     #hasheq((ace_mode . text) (tm_scope . source.llvm)))
    (192
     "LOLCODE"
     programming
     (#".lol")
     #:cc9900
     #hasheq((ace_mode . text) (tm_scope . none)))
    (193
     "LSL"
     programming
     (#".lsl" #".lslp")
     #:3d9970
     #hasheq((ace_mode . lsl) (interpreters . (lsl)) (tm_scope . source.lsl)))
    (1013566805
     "LTspice Symbol"
     data
     (#".asy")
     #f
     #hasheq((ace_mode . text)
             (codemirror_mode . spreadsheet)
             (tm_scope . source.ltspice.symbol)))
    (194
     "LabVIEW"
     programming
     (#".lvproj" #".lvclass" #".lvlib")
     #:fede06
     #hasheq((ace_mode . xml) (codemirror_mode . xml) (tm_scope . text.xml)))
    (758480799
     "Lark"
     data
     (#".lark")
     #:2980B9
     #hasheq((ace_mode . text)
             (codemirror_mode . ebnf)
             (tm_scope . source.lark)))
    (195
     "Lasso"
     programming
     (#".lasso" #".las" #".lasso8" #".lasso9")
     #:999999
     #hasheq((ace_mode . text)
             (aliases . ("lassoscript"))
             (tm_scope . file.lasso)))
    (196
     "Latte"
     markup
     (#".latte")
     #:f2a542
     #hasheq((ace_mode . smarty)
             (codemirror_mode . smarty)
             (tm_scope . text.html.smarty)))
    (197
     "Lean"
     programming
     (#".lean" #".hlean")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.lean)))
    (198
     "Less"
     markup
     (#".less")
     #:1d365d
     #hasheq((ace_mode . less)
             (aliases . ("less-css"))
             (codemirror_mode . css)
             (tm_scope . source.css.less)))
    (199
     "Lex"
     programming
     (#".l" #".lex")
     #:DBCA00
     #hasheq((ace_mode . text)
             (aliases . ("flex"))
             (filenames . ("Lexer.x" "lexer.x"))
             (tm_scope . source.lex)))
    (1040646257
     "LigoLANG"
     programming
     (#".ligo")
     #:0e74ff
     #hasheq((ace_mode . pascal)
             (codemirror_mode . pascal)
             (group . " LigoLANG")
             (tm_scope . source.ligo)))
    (200
     "LilyPond"
     programming
     (#".ly" #".ily")
     #:9ccc7c
     #hasheq((ace_mode . text) (tm_scope . source.lilypond)))
    (201
     "Limbo"
     programming
     (#".b" #".m")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (202
     "Linker Script"
     data
     (#".ld" #".lds" #".x")
     #f
     #hasheq((ace_mode . text) (filenames . ("ld.script")) (tm_scope . none)))
    (203
     "Linux Kernel Module"
     data
     (#".mod")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (204
     "Liquid"
     markup
     (#".liquid")
     #:67b8de
     #hasheq((ace_mode . liquid) (tm_scope . text.html.liquid)))
    (205
     "Literate Agda"
     programming
     (#".lagda")
     #:315665
     #hasheq((ace_mode . text) (group . " Agda") (tm_scope . none)))
    (206
     "Literate CoffeeScript"
     programming
     (#".litcoffee" #".coffee.md")
     #:244776
     #hasheq((ace_mode . text)
             (aliases . ("litcoffee"))
             (group . " CoffeeScript")
             (tm_scope . source.litcoffee)
             (wrap . true)))
    (207
     "Literate Haskell"
     programming
     (#".lhs")
     #:5e5086
     #hasheq((ace_mode . text)
             (aliases . ("lhaskell" "lhs"))
             (codemirror_mode . haskell-literate)
             (group . " Haskell")
             (tm_scope . text.tex.latex.haskell)))
    (208
     "LiveScript"
     programming
     (#".ls" #"._ls")
     #:499886
     #hasheq((ace_mode . livescript)
             (aliases . ("live-script" "ls"))
             (codemirror_mode . livescript)
             (filenames . ("Slakefile"))
             (tm_scope . source.livescript)))
    (209
     "Logos"
     programming
     (#".xm" #".x" #".xi")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.logos)))
    (210
     "Logtalk"
     programming
     (#".lgt" #".logtalk")
     #:295b9a
     #hasheq((ace_mode . text) (tm_scope . source.logtalk)))
    (211
     "LookML"
     programming
     (#".lookml" #".model.lkml" #".view.lkml")
     #:652B81
     #hasheq((ace_mode . yaml)
             (codemirror_mode . yaml)
             (tm_scope . source.yaml)))
    (212
     "LoomScript"
     programming
     (#".ls")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.loomscript)))
    (213
     "Lua"
     programming
     (#".lua"
      #".fcgi"
      #".nse"
      #".p8"
      #".pd_lua"
      #".rbxs"
      #".rockspec"
      #".wlua")
     #:000080
     #hasheq((ace_mode . lua)
             (codemirror_mode . lua)
             (filenames . (".luacheckrc"))
             (interpreters . (lua))
             (tm_scope . source.lua)))
    (214
     "M"
     programming
     (#".mumps" #".m")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("mumps"))
             (codemirror_mode . mumps)
             (tm_scope . none)))
    (215
     "M4"
     programming
     (#".m4" #".mc")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.m4)))
    (216
     "M4Sugar"
     programming
     (#".m4")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("autoconf"))
             (filenames . ("configure.ac"))
             (group . " M4")
             (tm_scope . source.m4)))
    (225
     "MATLAB"
     programming
     (#".matlab" #".m")
     #:e16737
     #hasheq((ace_mode . matlab)
             (aliases . ("octave"))
             (codemirror_mode . octave)
             (tm_scope . source.matlab)))
    (217
     "MAXScript"
     programming
     (#".ms" #".mcr")
     #:00a6a6
     #hasheq((ace_mode . text) (tm_scope . source.maxscript)))
    (448253929
     "MLIR"
     programming
     (#".mlir")
     #:5EC8DB
     #hasheq((ace_mode . text) (tm_scope . source.mlir)))
    (426
     "MQL4"
     programming
     (#".mq4" #".mqh")
     #:62A8D6
     #hasheq((ace_mode . c_cpp) (tm_scope . source.mql5)))
    (427
     "MQL5"
     programming
     (#".mq5" #".mqh")
     #:4A76B8
     #hasheq((ace_mode . c_cpp) (tm_scope . source.mql5)))
    (218
     "MTML"
     markup
     (#".mtml")
     #:b7e1f4
     #hasheq((ace_mode . html)
             (codemirror_mode . htmlmixed)
             (tm_scope . text.html.basic)))
    (219
     "MUF"
     programming
     (#".muf" #".m")
     #f
     #hasheq((ace_mode . forth)
             (codemirror_mode . forth)
             (group . " Forth")
             (tm_scope . none)))
    (34167825
     "Macaulay2"
     programming
     (#".m2")
     #:d8ffff
     #hasheq((ace_mode . text)
             (aliases . ("m2"))
             (interpreters . (M2))
             (tm_scope . source.m2)))
    (220
     "Makefile"
     programming
     (#".mak" #".d" #".make" #".makefile" #".mk" #".mkfile")
     #:427819
     #hasheq((ace_mode . makefile)
             (aliases . ("bsdmake" "make" "mf"))
             (codemirror_mode . cmake)
             (filenames
              .
              ("BSDmakefile"
               "GNUmakefile"
               "Kbuild"
               "Makefile"
               "Makefile.am"
               "Makefile.boot"
               "Makefile.frag"
               "Makefile.in"
               "Makefile.inc"
               "Makefile.wat"
               "makefile"
               "makefile.sco"
               "mkfile"))
             (interpreters . (make))
             (tm_scope . source.makefile)))
    (221
     "Mako"
     programming
     (#".mako" #".mao")
     #:7e858d
     #hasheq((ace_mode . text) (tm_scope . text.html.mako)))
    (222
     "Markdown"
     prose
     (#".md"
      #".livemd"
      #".markdown"
      #".mdown"
      #".mdwn"
      #".mdx"
      #".mkd"
      #".mkdn"
      #".mkdown"
      #".ronn"
      #".scd"
      #".workbook")
     #:083fa1
     #hasheq((ace_mode . markdown)
             (aliases . ("pandoc"))
             (codemirror_mode . gfm)
             (filenames . ("contents.lr"))
             (tm_scope . source.gfm)
             (wrap . true)))
    (932782397
     "Marko"
     markup
     (#".marko")
     #:42bff2
     #hasheq((ace_mode . text)
             (aliases . ("markojs"))
             (codemirror_mode . htmlmixed)
             (tm_scope . text.marko)))
    (223
     "Mask"
     markup
     (#".mask")
     #:f97732
     #hasheq((ace_mode . mask) (tm_scope . source.mask)))
    (224
     "Mathematica"
     programming
     (#".mathematica"
      #".cdf"
      #".m"
      #".ma"
      #".mt"
      #".nb"
      #".nbp"
      #".wl"
      #".wlt")
     #:dd1100
     #hasheq((ace_mode . text)
             (aliases
              .
              ("mma" "wolfram" "wolfram language" "wolfram lang" "wl"))
             (codemirror_mode . mathematica)
             (tm_scope . source.mathematica)))
    (226
     "Maven POM"
     data
     (#"")
     #f
     #hasheq((ace_mode . xml)
             (codemirror_mode . xml)
             (filenames . ("pom.xml"))
             (group . " XML")
             (tm_scope . text.xml.pom)))
    (227
     "Max"
     programming
     (#".maxpat" #".maxhelp" #".maxproj" #".mxt" #".pat")
     #:c4a79c
     #hasheq((ace_mode . json)
             (aliases . ("max/msp" "maxmsp"))
             (codemirror_mode . javascript)
             (tm_scope . source.json)))
    (229
     "Mercury"
     programming
     (#".m" #".moo")
     #:ff2b2b
     #hasheq((ace_mode . prolog)
             (interpreters . (mmi))
             (tm_scope . source.mercury)))
    (385992043
     "Mermaid"
     markup
     (#".mmd" #".mermaid")
     #:ff3670
     #hasheq((ace_mode . text)
             (aliases . ("mermaid example"))
             (tm_scope . source.mermaid)))
    (799141244
     "Meson"
     programming
     (#"")
     #:007800
     #hasheq((ace_mode . text)
             (filenames . ("meson.build" "meson_options.txt"))
             (tm_scope . source.meson)))
    (230
     "Metal"
     programming
     (#".metal")
     #:8f14e9
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.c++)))
    (800983837
     "Microsoft Developer Studio Project"
     data
     (#".dsp")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (849523096
     "Microsoft Visual Studio Solution"
     data
     (#".sln")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.solution)))
    (231
     "MiniD"
     programming
     (#".minid")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (4896465
     "MiniYAML"
     data
     (#".yaml" #".yml")
     #:ff1111
     #hasheq((ace_mode . yaml)
             (codemirror_mode . yaml)
             (tm_scope . source.miniyaml)))
    (968740319
     "Mint"
     programming
     (#".mint")
     #:02b046
     #hasheq((ace_mode . text) (tm_scope . source.mint)))
    (232
     "Mirah"
     programming
     (#".druby" #".duby" #".mirah")
     #:c7a938
     #hasheq((ace_mode . ruby)
             (codemirror_mode . ruby)
             (tm_scope . source.ruby)))
    (233
     "Modelica"
     programming
     (#".mo")
     #:de1d31
     #hasheq((ace_mode . text)
             (codemirror_mode . modelica)
             (tm_scope . source.modelica)))
    (234
     "Modula-2"
     programming
     (#".mod")
     #:10253f
     #hasheq((ace_mode . text) (tm_scope . source.modula2)))
    (564743864
     "Modula-3"
     programming
     (#".i3" #".ig" #".m3" #".mg")
     #:223388
     #hasheq((ace_mode . text) (tm_scope . source.modula-3)))
    (235
     "Module Management System"
     programming
     (#".mms" #".mmk")
     #f
     #hasheq((ace_mode . text)
             (filenames . ("descrip.mmk" "descrip.mms"))
             (tm_scope . none)))
    (236
     "Monkey"
     programming
     (#".monkey" #".monkey2")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.monkey)))
    (231751931
     "Monkey C"
     programming
     (#".mc")
     #:8D6747
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.mc)))
    (237
     "Moocode"
     programming
     (#".moo")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (238
     "MoonScript"
     programming
     (#".moon")
     #:ff4585
     #hasheq((ace_mode . text)
             (interpreters . (moon))
             (tm_scope . source.moonscript)))
    (202937027
     "Motoko"
     programming
     (#".mo")
     #:fbb03b
     #hasheq((ace_mode . text) (tm_scope . source.mo)))
    (477582706
     "Motorola 68K Assembly"
     programming
     (#".asm" #".i" #".inc" #".s" #".x68")
     #:005daa
     #hasheq((ace_mode . assembly_x86)
             (aliases . ("m68k"))
             (group . " Assembly")
             (tm_scope . source.m68k)))
    (638334599
     "Move"
     programming
     (#".move")
     #:4a137a
     #hasheq((ace_mode . text) (tm_scope . source.move)))
    (474864066
     "Muse"
     prose
     (#".muse")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("amusewiki" "emacs muse"))
             (tm_scope . text.muse)
             (wrap . true)))
    (638334590
     "Mustache"
     markup
     (#".mustache")
     #:724b3b
     #hasheq((ace_mode . smarty)
             (codemirror_mode . smarty)
             (tm_scope . text.html.smarty)))
    (239
     "Myghty"
     programming
     (#".myt")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (171666519
     "NASL"
     programming
     (#".nasl" #".inc")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.nasl)))
    (240
     "NCL"
     programming
     (#".ncl")
     #:28431f
     #hasheq((ace_mode . text) (tm_scope . source.ncl)))
    (481192983
     "NEON"
     data
     (#".neon")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("nette object notation" "ne-on"))
             (tm_scope . source.neon)))
    (241 "NL" data (#".nl") #f #hasheq((ace_mode . text) (tm_scope . none)))
    (685022663
     "NPM Config"
     data
     (#"")
     #:cb3837
     #hasheq((ace_mode . text)
             (aliases . ("npmrc"))
             (filenames . (".npmrc"))
             (group . " INI")
             (tm_scope . source.ini.npmrc)))
    (242
     "NSIS"
     programming
     (#".nsi" #".nsh")
     #f
     #hasheq((ace_mode . text)
             (codemirror_mode . nsis)
             (tm_scope . source.nsis)))
    (731233819
     "NWScript"
     programming
     (#".nss")
     #:111522
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.c.nwscript)))
    (178322513
     "Nasal"
     programming
     (#".nas")
     #:1d2c4e
     #hasheq((ace_mode . text) (tm_scope . none)))
    (521429430
     "Nearley"
     programming
     (#".ne" #".nearley")
     #:990000
     #hasheq((ace_mode . text) (tm_scope . source.ne)))
    (243
     "Nemerle"
     programming
     (#".n")
     #:3d3c6e
     #hasheq((ace_mode . text) (tm_scope . source.nemerle)))
    (244
     "NetLinx"
     programming
     (#".axs" #".axi")
     #:0aa0ff
     #hasheq((ace_mode . text) (tm_scope . source.netlinx)))
    (245
     "NetLinx+ERB"
     programming
     (#".axs.erb" #".axi.erb")
     #:747faa
     #hasheq((ace_mode . text) (tm_scope . source.netlinx.erb)))
    (246
     "NetLogo"
     programming
     (#".nlogo")
     #:ff6375
     #hasheq((ace_mode . lisp)
             (codemirror_mode . commonlisp)
             (tm_scope . source.lisp)))
    (247
     "NewLisp"
     programming
     (#".nl" #".lisp" #".lsp")
     #:87AED7
     #hasheq((ace_mode . lisp)
             (codemirror_mode . commonlisp)
             (interpreters . (newlisp))
             (tm_scope . source.lisp)))
    (506780613
     "Nextflow"
     programming
     (#".nf")
     #:3ac486
     #hasheq((ace_mode . groovy)
             (filenames . ("nextflow.config"))
             (interpreters . (nextflow))
             (tm_scope . source.nextflow)))
    (248
     "Nginx"
     data
     (#".nginx" #".nginxconf" #".vhost")
     #:009639
     #hasheq((ace_mode . text)
             (aliases . ("nginx configuration file"))
             (codemirror_mode . nginx)
             (filenames . ("nginx.conf"))
             (tm_scope . source.nginx)))
    (249
     "Nim"
     programming
     (#".nim" #".nim.cfg" #".nimble" #".nimrod" #".nims")
     #:ffc200
     #hasheq((ace_mode . text)
             (filenames . ("nim.cfg"))
             (tm_scope . source.nim)))
    (250
     "Ninja"
     data
     (#".ninja")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.ninja)))
    (251
     "Nit"
     programming
     (#".nit")
     #:009917
     #hasheq((ace_mode . text) (tm_scope . source.nit)))
    (252
     "Nix"
     programming
     (#".nix")
     #:7e7eff
     #hasheq((ace_mode . nix) (aliases . ("nixos")) (tm_scope . source.nix)))
    (253
     "Nu"
     programming
     (#".nu")
     #:c9df40
     #hasheq((ace_mode . scheme)
             (aliases . ("nush"))
             (codemirror_mode . scheme)
             (filenames . ("Nukefile"))
             (interpreters . (nush))
             (tm_scope . source.nu)))
    (254
     "NumPy"
     programming
     (#".numpy" #".numpyw" #".numsc")
     #:9C8AF9
     #hasheq((ace_mode . text)
             (codemirror_mode . python)
             (group . " Python")
             (tm_scope . none)))
    (461856962
     "Nunjucks"
     markup
     (#".njk")
     #:3d8137
     #hasheq((ace_mode . nunjucks)
             (aliases . ("njk"))
             (tm_scope . text.html.nunjucks)))
    (834374816
     "OASv2-json"
     data
     (#".json")
     #:85ea2d
     #hasheq((ace_mode . json)
             (codemirror_mode . javascript)
             (group . " OpenAPI Specification v2")
             (tm_scope . source.json)))
    (105187618
     "OASv2-yaml"
     data
     (#".yaml" #".yml")
     #:85ea2d
     #hasheq((ace_mode . yaml)
             (codemirror_mode . yaml)
             (group . " OpenAPI Specification v2")
             (tm_scope . source.yaml)))
    (980062566
     "OASv3-json"
     data
     (#".json")
     #:85ea2d
     #hasheq((ace_mode . json)
             (codemirror_mode . javascript)
             (group . " OpenAPI Specification v3")
             (tm_scope . source.json)))
    (51239111
     "OASv3-yaml"
     data
     (#".yaml" #".yml")
     #:85ea2d
     #hasheq((ace_mode . yaml)
             (codemirror_mode . yaml)
             (group . " OpenAPI Specification v3")
             (tm_scope . source.yaml)))
    (255
     "OCaml"
     programming
     (#".ml" #".eliom" #".eliomi" #".ml4" #".mli" #".mll" #".mly")
     #:3be133
     #hasheq((ace_mode . ocaml)
             (codemirror_mode . mllike)
             (interpreters . (ocaml ocamlrun ocamlscript))
             (tm_scope . source.ocaml)))
    (256
     "ObjDump"
     data
     (#".objdump")
     #f
     #hasheq((ace_mode . assembly_x86) (tm_scope . objdump.x86asm)))
    (985227236
     "Object Data Instance Notation"
     data
     (#".odin")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.odin-ehr)))
    (202735509
     "ObjectScript"
     programming
     (#".cls")
     #:424893
     #hasheq((ace_mode . text) (tm_scope . source.objectscript)))
    (257
     "Objective-C"
     programming
     (#".m" #".h")
     #:438eff
     #hasheq((ace_mode . objectivec)
             (aliases . ("obj-c" "objc" "objectivec"))
             (codemirror_mode . clike)
             (tm_scope . source.objc)))
    (258
     "Objective-C++"
     programming
     (#".mm")
     #:6866fb
     #hasheq((ace_mode . objectivec)
             (aliases . ("obj-c++" "objc++" "objectivec++"))
             (codemirror_mode . clike)
             (tm_scope . source.objc++)))
    (259
     "Objective-J"
     programming
     (#".j" #".sj")
     #:ff0c5a
     #hasheq((ace_mode . text)
             (aliases . ("obj-j" "objectivej" "objj"))
             (tm_scope . source.js.objj)))
    (889244082
     "Odin"
     programming
     (#".odin")
     #:60AFFE
     #hasheq((ace_mode . text)
             (aliases . ("odinlang" "odin-lang"))
             (tm_scope . source.odin)))
    (260
     "Omgrofl"
     programming
     (#".omgrofl")
     #:cabbff
     #hasheq((ace_mode . text) (tm_scope . none)))
    (261
     "Opa"
     programming
     (#".opa")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.opa)))
    (262
     "Opal"
     programming
     (#".opal")
     #:f7ede0
     #hasheq((ace_mode . text) (tm_scope . source.opal)))
    (840483232
     "Open Policy Agent"
     programming
     (#".rego")
     #:7d9199
     #hasheq((ace_mode . text) (tm_scope . source.rego)))
    (848295328
     "OpenAPI Specification v2"
     data
     (#"")
     #:85ea2d
     #hasheq((ace_mode . text) (aliases . ("oasv2")) (tm_scope . none)))
    (557959099
     "OpenAPI Specification v3"
     data
     (#"")
     #:85ea2d
     #hasheq((ace_mode . text) (aliases . ("oasv3")) (tm_scope . none)))
    (263
     "OpenCL"
     programming
     (#".cl" #".opencl")
     #:ed2e2d
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (group . " C")
             (tm_scope . source.c)))
    (264
     "OpenEdge ABL"
     programming
     (#".p" #".cls" #".w")
     #:5ce600
     #hasheq((ace_mode . text)
             (aliases . ("progress" "openedge" "abl"))
             (tm_scope . source.abl)))
    (153739399
     "OpenQASM"
     programming
     (#".qasm")
     #:AA70FF
     #hasheq((ace_mode . text) (tm_scope . source.qasm)))
    (265
     "OpenRC runscript"
     programming
     (#"")
     #f
     #hasheq((ace_mode . sh)
             (aliases . ("openrc"))
             (codemirror_mode . shell)
             (group . " Shell")
             (interpreters . (openrc-run))
             (tm_scope . source.shell)))
    (266
     "OpenSCAD"
     programming
     (#".scad")
     #:e5cd45
     #hasheq((ace_mode . scad) (tm_scope . source.scad)))
    (598917541
     "OpenStep Property List"
     data
     (#".plist" #".glyphs")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.plist)))
    (374317347
     "OpenType Feature File"
     data
     (#".fea")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("AFDKO"))
             (tm_scope . source.opentype)))
    (723589315
     "Option List"
     data
     (#"")
     #:476732
     #hasheq((ace_mode . sh)
             (aliases . ("opts" "ackrc"))
             (codemirror_mode . shell)
             (filenames . (".ackrc" "ackrc" "mocha.opts"))
             (tm_scope . source.opts)))
    (267
     "Org"
     prose
     (#".org")
     #:77aa99
     #hasheq((ace_mode . text) (tm_scope . none) (wrap . true)))
    (268
     "Ox"
     programming
     (#".ox" #".oxh" #".oxo")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.ox)))
    (269
     "Oxygene"
     programming
     (#".oxygene")
     #:cdd0e3
     #hasheq((ace_mode . text) (tm_scope . none)))
    (270
     "Oz"
     programming
     (#".oz")
     #:fab738
     #hasheq((ace_mode . text) (codemirror_mode . oz) (tm_scope . source.oz)))
    (348895984
     "P4"
     programming
     (#".p4")
     #:7055b5
     #hasheq((ace_mode . text) (tm_scope . source.p4)))
    (736235603
     "PDDL"
     programming
     (#".pddl")
     #:0d00ff
     #hasheq((ace_mode . text) (tm_scope . source.pddl)))
    (81442128
     "PEG.js"
     programming
     (#".pegjs")
     #:234d6b
     #hasheq((ace_mode . javascript)
             (codemirror_mode . javascript)
             (tm_scope . source.pegjs)))
    (272
     "PHP"
     programming
     (#".php"
      #".aw"
      #".ctp"
      #".fcgi"
      #".inc"
      #".php3"
      #".php4"
      #".php5"
      #".phps"
      #".phpt")
     #:4F5D95
     #hasheq((ace_mode . php)
             (aliases . ("inc"))
             (codemirror_mode . php)
             (filenames . (".php" ".php_cs" ".php_cs.dist" "Phakefile"))
             (interpreters . (php))
             (tm_scope . text.html.php)))
    (273
     "PLSQL"
     programming
     (#".pls"
      #".bdy"
      #".ddl"
      #".fnc"
      #".pck"
      #".pkb"
      #".pks"
      #".plb"
      #".plsql"
      #".prc"
      #".spc"
      #".sql"
      #".tpb"
      #".tps"
      #".trg"
      #".vw")
     #:dad8d8
     #hasheq((ace_mode . sql) (codemirror_mode . sql) (tm_scope . none)))
    (274
     "PLpgSQL"
     programming
     (#".pgsql" #".sql")
     #:336790
     #hasheq((ace_mode . pgsql)
             (codemirror_mode . sql)
             (tm_scope . source.sql)))
    (275
     "POV-Ray SDL"
     programming
     (#".pov" #".inc")
     #:6bac65
     #hasheq((ace_mode . text)
             (aliases . ("pov-ray" "povray"))
             (tm_scope . source.pov-ray)))
    (276
     "Pan"
     programming
     (#".pan")
     #:cc0000
     #hasheq((ace_mode . text) (tm_scope . source.pan)))
    (277
     "Papyrus"
     programming
     (#".psc")
     #:6600cc
     #hasheq((ace_mode . text) (tm_scope . source.papyrus.skyrim)))
    (278
     "Parrot"
     programming
     (#".parrot")
     #:f3ca0a
     #hasheq((ace_mode . text) (tm_scope . none)))
    (279
     "Parrot Assembly"
     programming
     (#".pasm")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("pasm"))
             (group . " Parrot")
             (interpreters . (parrot))
             (tm_scope . none)))
    (280
     "Parrot Internal Representation"
     programming
     (#".pir")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("pir"))
             (group . " Parrot")
             (interpreters . (parrot))
             (tm_scope . source.parrot.pir)))
    (281
     "Pascal"
     programming
     (#".pas" #".dfm" #".dpr" #".inc" #".lpr" #".pascal" #".pp")
     #:E3F171
     #hasheq((ace_mode . pascal)
             (aliases . ("delphi" "objectpascal"))
             (codemirror_mode . pascal)
             (interpreters . (instantfpc))
             (tm_scope . source.pascal)))
    (271
     "Pawn"
     programming
     (#".pwn" #".inc" #".sma")
     #:dbb284
     #hasheq((ace_mode . text) (tm_scope . source.pawn)))
    (840372442
     "Pep8"
     programming
     (#".pep")
     #:C76F5B
     #hasheq((ace_mode . text) (tm_scope . source.pep8)))
    (282
     "Perl"
     programming
     (#".pl"
      #".al"
      #".cgi"
      #".fcgi"
      #".perl"
      #".ph"
      #".plx"
      #".pm"
      #".psgi"
      #".t")
     #:0298c3
     #hasheq((ace_mode . perl)
             (aliases . ("cperl"))
             (codemirror_mode . perl)
             (filenames
              .
              (".latexmkrc"
               "Makefile.PL"
               "Rexfile"
               "ack"
               "cpanfile"
               "latexmkrc"))
             (interpreters . (cperl perl))
             (tm_scope . source.perl)))
    (425
     "Pic"
     markup
     (#".pic" #".chem")
     #f
     #hasheq((ace_mode . text)
             (codemirror_mode . troff)
             (group . " Roff")
             (tm_scope . source.pic)))
    (284
     "Pickle"
     data
     (#".pkl")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (285
     "PicoLisp"
     programming
     (#".l")
     #:6067af
     #hasheq((ace_mode . lisp)
             (interpreters . (picolisp pil))
             (tm_scope . source.lisp)))
    (286
     "PigLatin"
     programming
     (#".pig")
     #:fcd7de
     #hasheq((ace_mode . text) (tm_scope . source.pig_latin)))
    (287
     "Pike"
     programming
     (#".pike" #".pmod")
     #:005390
     #hasheq((ace_mode . text)
             (interpreters . (pike))
             (tm_scope . source.pike)))
    (833504686
     "PlantUML"
     data
     (#".puml" #".iuml" #".plantuml")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.wsd)))
    (288
     "Pod"
     prose
     (#".pod")
     #f
     #hasheq((ace_mode . perl)
             (codemirror_mode . perl)
             (interpreters . (perl))
             (tm_scope . none)
             (wrap . true)))
    (155357471
     "Pod 6"
     prose
     (#".pod" #".pod6")
     #f
     #hasheq((ace_mode . perl)
             (interpreters . (perl6))
             (tm_scope . source.raku)
             (wrap . true)))
    (289
     "PogoScript"
     programming
     (#".pogo")
     #:d80074
     #hasheq((ace_mode . text) (tm_scope . source.pogoscript)))
    (839112914
     "Polar"
     programming
     (#".polar")
     #:ae81ff
     #hasheq((ace_mode . text) (tm_scope . source.polar)))
    (290
     "Pony"
     programming
     (#".pony")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.pony)))
    (832391833
     "Portugol"
     programming
     (#".por")
     #:f8bd00
     #hasheq((ace_mode . text) (tm_scope . source.portugol)))
    (262764437
     "PostCSS"
     markup
     (#".pcss" #".postcss")
     #:dc3a0c
     #hasheq((ace_mode . text) (group . " CSS") (tm_scope . source.postcss)))
    (291
     "PostScript"
     markup
     (#".ps" #".eps" #".epsi" #".pfa")
     #:da291c
     #hasheq((ace_mode . text)
             (aliases . ("postscr"))
             (tm_scope . source.postscript)))
    (292
     "PowerBuilder"
     programming
     (#".pbt" #".sra" #".sru" #".srw")
     #:8f0f8d
     #hasheq((ace_mode . text) (tm_scope . none)))
    (293
     "PowerShell"
     programming
     (#".ps1" #".psd1" #".psm1")
     #:012456
     #hasheq((ace_mode . powershell)
             (aliases . ("posh" "pwsh"))
             (codemirror_mode . powershell)
             (interpreters . (pwsh))
             (tm_scope . source.powershell)))
    (499933428
     "Prisma"
     data
     (#".prisma")
     #:0c344b
     #hasheq((ace_mode . text) (tm_scope . source.prisma)))
    (294
     "Processing"
     programming
     (#".pde")
     #:0096D8
     #hasheq((ace_mode . text) (tm_scope . source.processing)))
    (305313959
     "Procfile"
     programming
     (#"")
     #:3B2F63
     #hasheq((ace_mode . batchfile)
             (filenames . ("Procfile"))
             (tm_scope . source.procfile)))
    (716513858
     "Proguard"
     data
     (#".pro")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (295
     "Prolog"
     programming
     (#".pl" #".pro" #".prolog" #".yap")
     #:74283c
     #hasheq((ace_mode . prolog)
             (interpreters . (swipl yap))
             (tm_scope . source.prolog)))
    (441858312
     "Promela"
     programming
     (#".pml")
     #:de0000
     #hasheq((ace_mode . text) (tm_scope . source.promela)))
    (296
     "Propeller Spin"
     programming
     (#".spin")
     #:7fa2a7
     #hasheq((ace_mode . text) (tm_scope . source.spin)))
    (297
     "Protocol Buffer"
     data
     (#".proto")
     #f
     #hasheq((ace_mode . protobuf)
             (aliases . ("protobuf" "Protocol Buffers"))
             (codemirror_mode . protobuf)
             (tm_scope . source.proto)))
    (436568854
     "Protocol Buffer Text Format"
     data
     (#".textproto" #".pbt" #".pbtxt")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("text proto" "protobuf text format"))
             (tm_scope . source.textproto)))
    (298
     "Public Key"
     data
     (#".asc" #".pub")
     #f
     #hasheq((ace_mode . text)
             (codemirror_mode . asciiarmor)
             (tm_scope . none)))
    (179
     "Pug"
     markup
     (#".jade" #".pug")
     #:a86454
     #hasheq((ace_mode . jade) (codemirror_mode . pug) (tm_scope . text.jade)))
    (299
     "Puppet"
     programming
     (#".pp")
     #:302B6D
     #hasheq((ace_mode . text)
             (codemirror_mode . puppet)
             (filenames . ("Modulefile"))
             (tm_scope . source.puppet)))
    (300
     "Pure Data"
     data
     (#".pd")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (301
     "PureBasic"
     programming
     (#".pb" #".pbi")
     #:5a6986
     #hasheq((ace_mode . text) (tm_scope . none)))
    (302
     "PureScript"
     programming
     (#".purs")
     #:1D222D
     #hasheq((ace_mode . haskell)
             (codemirror_mode . haskell)
             (tm_scope . source.purescript)))
    (303
     "Python"
     programming
     (#".py"
      #".cgi"
      #".fcgi"
      #".gyp"
      #".gypi"
      #".lmi"
      #".py3"
      #".pyde"
      #".pyi"
      #".pyp"
      #".pyt"
      #".pyw"
      #".rpy"
      #".smk"
      #".spec"
      #".tac"
      #".wsgi"
      #".xpy")
     #:3572A5
     #hasheq((ace_mode . python)
             (aliases . ("python3" "rusthon"))
             (codemirror_mode . python)
             (filenames
              .
              (".gclient"
               "DEPS"
               "SConscript"
               "SConstruct"
               "Snakefile"
               "wscript"))
             (interpreters . (python python2 python3))
             (tm_scope . source.python)))
    (428
     "Python console"
     programming
     (#"")
     #:3572A5
     #hasheq((ace_mode . text)
             (aliases . ("pycon"))
             (group . " Python")
             (tm_scope . text.python.console)))
    (304
     "Python traceback"
     data
     (#".pytb")
     #:3572A5
     #hasheq((ace_mode . text)
             (group . " Python")
             (tm_scope . text.python.traceback)))
    (697448245
     "Q#"
     programming
     (#".qs")
     #:fed659
     #hasheq((ace_mode . text)
             (aliases . ("qsharp"))
             (tm_scope . source.qsharp)))
    (305
     "QML"
     programming
     (#".qml" #".qbs")
     #:44a51c
     #hasheq((ace_mode . text) (tm_scope . source.qml)))
    (306
     "QMake"
     programming
     (#".pro" #".pri")
     #f
     #hasheq((ace_mode . text)
             (interpreters . (qmake))
             (tm_scope . source.qmake)))
    (558193693
     "Qt Script"
     programming
     (#".qs")
     #:00b841
     #hasheq((ace_mode . javascript)
             (codemirror_mode . javascript)
             (filenames . ("installscript.qs" "toolchain_installscript.qs"))
             (tm_scope . source.js)))
    (375265331
     "Quake"
     programming
     (#"")
     #:882233
     #hasheq((ace_mode . text)
             (filenames . ("m3makefile" "m3overrides"))
             (tm_scope . source.quake)))
    (307
     "R"
     programming
     (#".r" #".rd" #".rsx")
     #:198CE7
     #hasheq((ace_mode . r)
             (aliases . ("R" "Rscript" "splus"))
             (codemirror_mode . r)
             (filenames . (".Rprofile" "expr-dist"))
             (interpreters . (Rscript))
             (tm_scope . source.r)))
    (308
     "RAML"
     markup
     (#".raml")
     #:77d9fb
     #hasheq((ace_mode . yaml)
             (codemirror_mode . yaml)
             (tm_scope . source.yaml)))
    (309
     "RDoc"
     prose
     (#".rdoc")
     #:701516
     #hasheq((ace_mode . rdoc) (tm_scope . text.rdoc) (wrap . true)))
    (310
     "REALbasic"
     programming
     (#".rbbas" #".rbfrm" #".rbmnu" #".rbres" #".rbtbar" #".rbuistate")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.vbnet)))
    (311
     "REXX"
     programming
     (#".rexx" #".pprx" #".rex")
     #:d90e09
     #hasheq((ace_mode . text)
             (aliases . ("arexx"))
             (interpreters . (regina rexx))
             (tm_scope . source.rexx)))
    (313
     "RMarkdown"
     prose
     (#".qmd" #".rmd")
     #:198ce7
     #hasheq((ace_mode . markdown)
             (codemirror_mode . gfm)
             (tm_scope . source.gfm)
             (wrap . true)))
    (1031374237
     "RPC"
     programming
     (#".x")
     #f
     #hasheq((ace_mode . c_cpp)
             (aliases . ("rpcgen" "oncrpc" "xdr"))
             (tm_scope . source.c)))
    (609977990
     "RPGLE"
     programming
     (#".rpgle" #".sqlrpgle")
     #:2BDE21
     #hasheq((ace_mode . text)
             (aliases . ("ile rpg" "sqlrpgle"))
             (tm_scope . source.rpgle)))
    (314
     "RPM Spec"
     data
     (#".spec")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("specfile"))
             (codemirror_mode . rpm)
             (tm_scope . source.rpm-spec)))
    (315
     "RUNOFF"
     markup
     (#".rnh" #".rno")
     #:665a4e
     #hasheq((ace_mode . text) (tm_scope . text.runoff) (wrap . true)))
    (316
     "Racket"
     programming
     (#".rkt" #".rktd" #".rktl" #".scrbl")
     #:3c5caa
     #hasheq((ace_mode . lisp)
             (interpreters . (racket))
             (tm_scope . source.racket)))
    (317
     "Ragel"
     programming
     (#".rl")
     #:9d5200
     #hasheq((ace_mode . text)
             (aliases . ("ragel-rb" "ragel-ruby"))
             (tm_scope . none)))
    (283
     "Raku"
     programming
     (#".6pl"
      #".6pm"
      #".nqp"
      #".p6"
      #".p6l"
      #".p6m"
      #".pl"
      #".pl6"
      #".pm"
      #".pm6"
      #".raku"
      #".rakumod"
      #".t")
     #:0000fb
     #hasheq((ace_mode . perl)
             (aliases . ("perl6" "perl-6"))
             (codemirror_mode . perl)
             (interpreters . (perl6 raku rakudo))
             (tm_scope . source.raku)))
    (173616037
     "Rascal"
     programming
     (#".rsc")
     #:fffaa0
     #hasheq((ace_mode . text) (tm_scope . source.rascal)))
    (318
     "Raw token data"
     data
     (#".raw")
     #f
     #hasheq((ace_mode . text) (aliases . ("raw")) (tm_scope . none)))
    (501875647
     "ReScript"
     programming
     (#".res")
     #:ed5051
     #hasheq((ace_mode . rust)
             (codemirror_mode . rust)
             (interpreters . (ocaml))
             (tm_scope . source.rescript)))
    (538732839
     "Readline Config"
     data
     (#"")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("inputrc" "readline"))
             (filenames . (".inputrc" "inputrc"))
             (group . " INI")
             (tm_scope . source.inputrc)))
    (869538413
     "Reason"
     programming
     (#".re" #".rei")
     #:ff5847
     #hasheq((ace_mode . rust)
             (codemirror_mode . rust)
             (tm_scope . source.reason)))
    (319002153
     "ReasonLIGO"
     programming
     (#".religo")
     #:ff5847
     #hasheq((ace_mode . rust)
             (codemirror_mode . rust)
             (group . " LigoLANG")
             (tm_scope . source.religo)))
    (319
     "Rebol"
     programming
     (#".reb" #".r" #".r2" #".r3" #".rebol")
     #:358a5b
     #hasheq((ace_mode . text) (tm_scope . source.rebol)))
    (865765202
     "Record Jar"
     data
     (#"")
     #:0673ba
     #hasheq((ace_mode . text)
             (codemirror_mode . properties)
             (filenames . ("language-subtag-registry.txt"))
             (tm_scope . source.record-jar)))
    (320
     "Red"
     programming
     (#".red" #".reds")
     #:f50000
     #hasheq((ace_mode . text)
             (aliases . ("red/system"))
             (tm_scope . source.red)))
    (321
     "Redcode"
     programming
     (#".cw")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (1020148948
     "Redirect Rules"
     data
     (#"")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("redirects"))
             (filenames . ("_redirects"))
             (tm_scope . source.redirects)))
    (363378884
     "Regular Expression"
     data
     (#".regexp" #".regex")
     #:009a00
     #hasheq((ace_mode . text)
             (aliases . ("regexp" "regex"))
             (tm_scope . source.regexp)))
    (322
     "Ren'Py"
     programming
     (#".rpy")
     #:ff7f7f
     #hasheq((ace_mode . python)
             (aliases . ("renpy"))
             (tm_scope . source.renpy)))
    (323
     "RenderScript"
     programming
     (#".rs" #".rsh")
     #f
     #hasheq((ace_mode . text) (tm_scope . none)))
    (51601661
     "Rich Text Format"
     markup
     (#".rtf")
     #f
     #hasheq((ace_mode . text) (tm_scope . text.rtf)))
    (431
     "Ring"
     programming
     (#".ring")
     #:2D54CB
     #hasheq((ace_mode . text) (tm_scope . source.ring)))
    (878396783
     "Riot"
     markup
     (#".riot")
     #:A71E49
     #hasheq((ace_mode . html) (tm_scope . text.html.riot)))
    (324
     "RobotFramework"
     programming
     (#".robot")
     #:00c0b5
     #hasheq((ace_mode . text) (tm_scope . text.robot)))
    (141
     "Roff"
     markup
     (#".roff"
      #".1"
      #".1in"
      #".1m"
      #".1x"
      #".2"
      #".3"
      #".3in"
      #".3m"
      #".3p"
      #".3pm"
      #".3qt"
      #".3x"
      #".4"
      #".5"
      #".6"
      #".7"
      #".8"
      #".9"
      #".l"
      #".man"
      #".mdoc"
      #".me"
      #".ms"
      #".n"
      #".nr"
      #".rno"
      #".tmac")
     #:ecdebe
     #hasheq((ace_mode . text)
             (aliases
              .
              ("groff"
               "man"
               "manpage"
               "man page"
               "man-page"
               "mdoc"
               "nroff"
               "troff"))
             (codemirror_mode . troff)
             (filenames . ("eqnrc" "mmn" "mmt" "troffrc" "troffrc-end"))
             (tm_scope . text.roff)
             (wrap . true)))
    (612669833
     "Roff Manpage"
     markup
     (#".1"
      #".1in"
      #".1m"
      #".1x"
      #".2"
      #".3"
      #".3in"
      #".3m"
      #".3p"
      #".3pm"
      #".3qt"
      #".3x"
      #".4"
      #".5"
      #".6"
      #".7"
      #".8"
      #".9"
      #".man"
      #".mdoc")
     #:ecdebe
     #hasheq((ace_mode . text)
             (codemirror_mode . troff)
             (group . " Roff")
             (tm_scope . text.roff)
             (wrap . true)))
    (325
     "Rouge"
     programming
     (#".rg")
     #:cc0088
     #hasheq((ace_mode . clojure)
             (codemirror_mode . clojure)
             (tm_scope . source.clojure)))
    (592853203
     "RouterOS Script"
     programming
     (#".rsc")
     #:DE3941
     #hasheq((ace_mode . text) (interpreters . (RouterOS)) (tm_scope . none)))
    (326
     "Ruby"
     programming
     (#".rb"
      #".builder"
      #".eye"
      #".fcgi"
      #".gemspec"
      #".god"
      #".jbuilder"
      #".mspec"
      #".pluginspec"
      #".podspec"
      #".prawn"
      #".rabl"
      #".rake"
      #".rbi"
      #".rbuild"
      #".rbw"
      #".rbx"
      #".ru"
      #".ruby"
      #".spec"
      #".thor"
      #".watchr")
     #:701516
     #hasheq((ace_mode . ruby)
             (aliases . ("jruby" "macruby" "rake" "rb" "rbx"))
             (codemirror_mode . ruby)
             (filenames
              .
              (".irbrc"
               ".pryrc"
               ".simplecov"
               "Appraisals"
               "Berksfile"
               "Brewfile"
               "Buildfile"
               "Capfile"
               "Dangerfile"
               "Deliverfile"
               "Fastfile"
               "Gemfile"
               "Guardfile"
               "Jarfile"
               "Mavenfile"
               "Podfile"
               "Puppetfile"
               "Rakefile"
               "Snapfile"
               "Steepfile"
               "Thorfile"
               "Vagrantfile"
               "buildfile"))
             (interpreters . (ruby macruby rake jruby rbx))
             (tm_scope . source.ruby)))
    (327
     "Rust"
     programming
     (#".rs" #".rs.in")
     #:dea584
     #hasheq((ace_mode . rust)
             (aliases . ("rs"))
             (codemirror_mode . rust)
             (tm_scope . source.rust)))
    (328
     "SAS"
     programming
     (#".sas")
     #:B34936
     #hasheq((ace_mode . text)
             (codemirror_mode . sas)
             (tm_scope . source.sas)))
    (329
     "SCSS"
     markup
     (#".scss")
     #:c6538c
     #hasheq((ace_mode . scss)
             (codemirror_mode . css)
             (tm_scope . source.css.scss)))
    (880010326
     "SELinux Policy"
     data
     (#".te")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("SELinux Kernel Policy Language" "sepolicy"))
             (filenames
              .
              ("file_contexts"
               "genfs_contexts"
               "initial_sids"
               "port_contexts"
               "security_classes"))
             (tm_scope . source.sepolicy)))
    (330
     "SMT"
     programming
     (#".smt2" #".smt")
     #f
     #hasheq((ace_mode . text)
             (interpreters
              .
              (boolector
               cvc4
               mathsat5
               opensmt
               smtinterpol
               smt-rat
               stp
               verit
               yices2
               z3))
             (tm_scope . source.smt)))
    (331
     "SPARQL"
     data
     (#".sparql" #".rq")
     #:0C4597
     #hasheq((ace_mode . text)
             (codemirror_mode . sparql)
             (tm_scope . source.sparql)))
    (332
     "SQF"
     programming
     (#".sqf" #".hqf")
     #:3F3F3F
     #hasheq((ace_mode . text) (tm_scope . source.sqf)))
    (333
     "SQL"
     data
     (#".sql"
      #".cql"
      #".ddl"
      #".inc"
      #".mysql"
      #".prc"
      #".tab"
      #".udf"
      #".viw")
     #:e38c00
     #hasheq((ace_mode . sql) (codemirror_mode . sql) (tm_scope . source.sql)))
    (334
     "SQLPL"
     programming
     (#".sql" #".db2")
     #:e38c00
     #hasheq((ace_mode . sql) (codemirror_mode . sql) (tm_scope . source.sql)))
    (335
     "SRecode Template"
     markup
     (#".srt")
     #:348a34
     #hasheq((ace_mode . lisp)
             (codemirror_mode . commonlisp)
             (tm_scope . source.lisp)))
    (554920715
     "SSH Config"
     data
     (#"")
     #f
     #hasheq((ace_mode . text)
             (filenames
              .
              ("ssh-config"
               "ssh_config"
               "sshconfig"
               "sshconfig.snip"
               "sshd-config"
               "sshd_config"))
             (group . " INI")
             (tm_scope . source.ssh-config)))
    (424510560
     "STAR"
     data
     (#".star")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.star)))
    (455361735
     "STL"
     data
     (#".stl")
     #:373b5e
     #hasheq((ace_mode . text)
             (aliases . ("ascii stl" "stla"))
             (tm_scope . source.stl)))
    (336
     "STON"
     data
     (#".ston")
     #f
     #hasheq((ace_mode . text)
             (group . " Smalltalk")
             (tm_scope . source.smalltalk)))
    (337
     "SVG"
     data
     (#".svg")
     #:ff9900
     #hasheq((ace_mode . xml)
             (codemirror_mode . xml)
             (tm_scope . text.xml.svg)))
    (1066250075
     "SWIG"
     programming
     (#".i")
     #f
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.c++)))
    (338
     "Sage"
     programming
     (#".sage" #".sagews")
     #f
     #hasheq((ace_mode . python)
             (codemirror_mode . python)
             (tm_scope . source.python)))
    (339
     "SaltStack"
     programming
     (#".sls")
     #:646464
     #hasheq((ace_mode . yaml)
             (aliases . ("saltstate" "salt"))
             (codemirror_mode . yaml)
             (tm_scope . source.yaml.salt)))
    (340
     "Sass"
     markup
     (#".sass")
     #:a53b70
     #hasheq((ace_mode . sass)
             (codemirror_mode . sass)
             (tm_scope . source.sass)))
    (341
     "Scala"
     programming
     (#".scala" #".kojo" #".sbt" #".sc")
     #:c22d40
     #hasheq((ace_mode . scala)
             (codemirror_mode . clike)
             (interpreters . (scala))
             (tm_scope . source.scala)))
    (342
     "Scaml"
     markup
     (#".scaml")
     #:bd181a
     #hasheq((ace_mode . text) (tm_scope . source.scaml)))
    (619814037
     "Scenic"
     programming
     (#".scenic")
     #:fdc700
     #hasheq((ace_mode . text)
             (interpreters . (scenic))
             (tm_scope . source.scenic)))
    (343
     "Scheme"
     programming
     (#".scm" #".sch" #".sld" #".sls" #".sps" #".ss")
     #:1e4aec
     #hasheq((ace_mode . scheme)
             (codemirror_mode . scheme)
             (interpreters . (scheme guile bigloo chicken csi gosh r6rs))
             (tm_scope . source.scheme)))
    (344
     "Scilab"
     programming
     (#".sci" #".sce" #".tst")
     #:ca0f21
     #hasheq((ace_mode . text) (tm_scope . source.scilab)))
    (345
     "Self"
     programming
     (#".self")
     #:0579aa
     #hasheq((ace_mode . text) (tm_scope . none)))
    (664257356
     "ShaderLab"
     programming
     (#".shader")
     #:222c37
     #hasheq((ace_mode . text) (tm_scope . source.shaderlab)))
    (346
     "Shell"
     programming
     (#".sh"
      #".bash"
      #".bats"
      #".cgi"
      #".command"
      #".env"
      #".fcgi"
      #".ksh"
      #".sh.in"
      #".tmux"
      #".tool"
      #".zsh"
      #".zsh-theme")
     #:89e051
     #hasheq((ace_mode . sh)
             (aliases . ("sh" "shell-script" "bash" "zsh"))
             (codemirror_mode . shell)
             (filenames
              .
              (".bash_aliases"
               ".bash_history"
               ".bash_logout"
               ".bash_profile"
               ".bashrc"
               ".cshrc"
               ".env"
               ".env.example"
               ".flaskenv"
               ".kshrc"
               ".login"
               ".profile"
               ".zlogin"
               ".zlogout"
               ".zprofile"
               ".zshenv"
               ".zshrc"
               "9fs"
               "PKGBUILD"
               "bash_aliases"
               "bash_logout"
               "bash_profile"
               "bashrc"
               "cshrc"
               "gradlew"
               "kshrc"
               "login"
               "man"
               "profile"
               "zlogin"
               "zlogout"
               "zprofile"
               "zshenv"
               "zshrc"))
             (interpreters . (ash bash dash ksh mksh pdksh rc sh zsh))
             (tm_scope . source.shell)))
    (687511714
     "ShellCheck Config"
     data
     (#"")
     #:cecfcb
     #hasheq((ace_mode . ini)
             (aliases . ("shellcheckrc"))
             (codemirror_mode . properties)
             (filenames . (".shellcheckrc"))
             (tm_scope . source.shellcheckrc)))
    (347
     "ShellSession"
     programming
     (#".sh-session")
     #f
     #hasheq((ace_mode . sh)
             (aliases . ("bash session" "console"))
             (codemirror_mode . shell)
             (tm_scope . text.shell-session)))
    (348
     "Shen"
     programming
     (#".shen")
     #:120F14
     #hasheq((ace_mode . text) (tm_scope . source.shen)))
    (208976687
     "Sieve"
     programming
     (#".sieve")
     #f
     #hasheq((ace_mode . text)
             (codemirror_mode . sieve)
             (tm_scope . source.sieve)))
    (735623761
     "Simple File Verification"
     data
     (#".sfv")
     #:C9BFED
     #hasheq((ace_mode . ini)
             (aliases . ("sfv"))
             (codemirror_mode . properties)
             (group . " Checksums")
             (tm_scope . source.sfv)))
    (987024632
     "Singularity"
     programming
     (#"")
     #:64E6AD
     #hasheq((ace_mode . text)
             (filenames . ("Singularity"))
             (tm_scope . source.singularity)))
    (349
     "Slash"
     programming
     (#".sl")
     #:007eff
     #hasheq((ace_mode . text) (tm_scope . text.html.slash)))
    (894641667
     "Slice"
     programming
     (#".ice")
     #:003fa2
     #hasheq((ace_mode . text) (tm_scope . source.slice)))
    (350
     "Slim"
     markup
     (#".slim")
     #:2b2b2b
     #hasheq((ace_mode . text)
             (codemirror_mode . slim)
             (tm_scope . text.slim)))
    (164123055
     "SmPL"
     programming
     (#".cocci")
     #:c94949
     #hasheq((ace_mode . text)
             (aliases . ("coccinelle"))
             (tm_scope . source.smpl)))
    (351
     "Smali"
     programming
     (#".smali")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.smali)))
    (352
     "Smalltalk"
     programming
     (#".st" #".cs")
     #:596706
     #hasheq((ace_mode . text)
             (aliases . ("squeak"))
             (codemirror_mode . smalltalk)
             (tm_scope . source.smalltalk)))
    (353
     "Smarty"
     programming
     (#".tpl")
     #:f0c040
     #hasheq((ace_mode . smarty)
             (codemirror_mode . smarty)
             (tm_scope . text.html.smarty)))
    (1027892786
     "Smithy"
     programming
     (#".smithy")
     #:c44536
     #hasheq((ace_mode . text)
             (codemirror_mode . clike)
             (tm_scope . source.smithy)))
    (237469032
     "Solidity"
     programming
     (#".sol")
     #:AA6746
     #hasheq((ace_mode . text) (tm_scope . source.solidity)))
    (222900098
     "Soong"
     data
     (#"")
     #f
     #hasheq((ace_mode . text)
             (filenames . ("Android.bp"))
             (tm_scope . source.bp)))
    (354
     "SourcePawn"
     programming
     (#".sp" #".inc")
     #:f69e1d
     #hasheq((ace_mode . text)
             (aliases . ("sourcemod"))
             (tm_scope . source.sourcepawn)))
    (767169629
     "Spline Font Database"
     data
     (#".sfd")
     #f
     #hasheq((ace_mode . yaml) (tm_scope . text.sfd)))
    (355
     "Squirrel"
     programming
     (#".nut")
     #:800000
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.nut)))
    (356
     "Stan"
     programming
     (#".stan")
     #:b2011d
     #hasheq((ace_mode . text) (tm_scope . source.stan)))
    (357
     "Standard ML"
     programming
     (#".ml" #".fun" #".sig" #".sml")
     #:dc566d
     #hasheq((ace_mode . text)
             (aliases . ("sml"))
             (codemirror_mode . mllike)
             (tm_scope . source.ml)))
    (960266174
     "Starlark"
     programming
     (#".bzl" #".star")
     #:76d275
     #hasheq((ace_mode . python)
             (aliases . ("bazel" "bzl"))
             (codemirror_mode . python)
             (filenames
              .
              ("BUCK"
               "BUILD"
               "BUILD.bazel"
               "Tiltfile"
               "WORKSPACE"
               "WORKSPACE.bazel"))
             (tm_scope . source.python)))
    (358
     "Stata"
     programming
     (#".do" #".ado" #".doh" #".ihlp" #".mata" #".matah" #".sthlp")
     #:1a5f91
     #hasheq((ace_mode . text) (tm_scope . source.stata)))
    (89855901
     "StringTemplate"
     markup
     (#".st")
     #:3fb34f
     #hasheq((ace_mode . html)
             (codemirror_mode . htmlmixed)
             (tm_scope . source.string-template)))
    (359
     "Stylus"
     markup
     (#".styl")
     #:ff6347
     #hasheq((ace_mode . stylus) (tm_scope . source.stylus)))
    (360
     "SubRip Text"
     data
     (#".srt")
     #:9e0101
     #hasheq((ace_mode . text) (tm_scope . text.srt)))
    (826404698
     "SugarSS"
     markup
     (#".sss")
     #:2fcc9f
     #hasheq((ace_mode . text) (tm_scope . source.css.postcss.sugarss)))
    (361
     "SuperCollider"
     programming
     (#".sc" #".scd")
     #:46390b
     #hasheq((ace_mode . text)
             (interpreters . (sclang scsynth))
             (tm_scope . source.supercollider)))
    (928734530
     "Svelte"
     markup
     (#".svelte")
     #:ff3e00
     #hasheq((ace_mode . html)
             (codemirror_mode . htmlmixed)
             (tm_scope . source.svelte)))
    (362
     "Swift"
     programming
     (#".swift")
     #:F05138
     #hasheq((ace_mode . text)
             (codemirror_mode . swift)
             (tm_scope . source.swift)))
    (363
     "SystemVerilog"
     programming
     (#".sv" #".svh" #".vh")
     #:DAE1C2
     #hasheq((ace_mode . verilog)
             (codemirror_mode . verilog)
             (tm_scope . source.systemverilog)))
    (422
     "TI Program"
     programming
     (#".8xp" #".8xk" #".8xk.txt" #".8xp.txt")
     #:A0AA87
     #hasheq((ace_mode . text) (tm_scope . none)))
    (364
     "TLA"
     programming
     (#".tla")
     #:4b0079
     #hasheq((ace_mode . text) (tm_scope . source.tla)))
    (365
     "TOML"
     data
     (#".toml")
     #:9c4221
     #hasheq((ace_mode . toml)
             (codemirror_mode . toml)
             (filenames
              .
              ("Cargo.lock" "Gopkg.lock" "Pipfile" "pdm.lock" "poetry.lock"))
             (tm_scope . source.toml)))
    (918334941
     "TSQL"
     programming
     (#".sql")
     #:e38c00
     #hasheq((ace_mode . sql) (tm_scope . source.tsql)))
    (1035892117
     "TSV"
     data
     (#".tsv")
     #:237346
     #hasheq((ace_mode . text) (tm_scope . source.generic-db)))
    (94901924
     "TSX"
     programming
     (#".tsx")
     #:3178c6
     #hasheq((ace_mode . javascript)
             (codemirror_mode . jsx)
             (group . " TypeScript")
             (tm_scope . source.tsx)))
    (366
     "TXL"
     programming
     (#".txl")
     #:0178b8
     #hasheq((ace_mode . text) (tm_scope . source.txl)))
    (959889508
     "Talon"
     programming
     (#".talon")
     #:333333
     #hasheq((ace_mode . text) (tm_scope . source.talon)))
    (367
     "Tcl"
     programming
     (#".tcl" #".adp" #".sdc" #".tcl.in" #".tm" #".xdc")
     #:e4cc98
     #hasheq((ace_mode . tcl)
             (aliases . ("sdc" "xdc"))
             (codemirror_mode . tcl)
             (filenames . ("owh" "starfield"))
             (interpreters . (tclsh wish))
             (tm_scope . source.tcl)))
    (368
     "Tcsh"
     programming
     (#".tcsh" #".csh")
     #f
     #hasheq((ace_mode . sh)
             (codemirror_mode . shell)
             (group . " Shell")
             (interpreters . (tcsh csh))
             (tm_scope . source.shell)))
    (369
     "TeX"
     markup
     (#".tex"
      #".aux"
      #".bbx"
      #".cbx"
      #".cls"
      #".dtx"
      #".ins"
      #".lbx"
      #".ltx"
      #".mkii"
      #".mkiv"
      #".mkvi"
      #".sty"
      #".toc")
     #:3D6117
     #hasheq((ace_mode . tex)
             (aliases . ("latex"))
             (codemirror_mode . stex)
             (tm_scope . text.tex.latex)
             (wrap . true)))
    (370
     "Tea"
     markup
     (#".tea")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.tea)))
    (371
     "Terra"
     programming
     (#".t")
     #:00004c
     #hasheq((ace_mode . lua)
             (codemirror_mode . lua)
             (interpreters . (lua))
             (tm_scope . source.terra)))
    (988020015
     "Texinfo"
     prose
     (#".texinfo" #".texi" #".txi")
     #f
     #hasheq((ace_mode . text)
             (interpreters . (makeinfo))
             (tm_scope . text.texinfo)
             (wrap . true)))
    (372
     "Text"
     prose
     (#".txt" #".fr" #".nb" #".ncl" #".no")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("fundamental" "plain text"))
             (filenames
              .
              ("CITATION"
               "CITATIONS"
               "COPYING"
               "COPYING.regex"
               "COPYRIGHT.regex"
               "FONTLOG"
               "INSTALL"
               "INSTALL.mysql"
               "LICENSE"
               "LICENSE.mysql"
               "NEWS"
               "README.me"
               "README.mysql"
               "README.nss"
               "click.me"
               "delete.me"
               "keep.me"
               "package.mask"
               "package.use.mask"
               "package.use.stable.mask"
               "read.me"
               "readme.1st"
               "test.me"
               "use.mask"
               "use.stable.mask"))
             (tm_scope . none)
             (wrap . true)))
    (981795023
     "TextMate Properties"
     data
     (#"")
     #:df66e4
     #hasheq((ace_mode . properties)
             (aliases . ("tm-properties"))
             (codemirror_mode . properties)
             (filenames . (".tm_properties"))
             (tm_scope . source.tm-properties)))
    (373
     "Textile"
     prose
     (#".textile")
     #:ffe7ac
     #hasheq((ace_mode . textile)
             (codemirror_mode . textile)
             (tm_scope . none)
             (wrap . true)))
    (374
     "Thrift"
     programming
     (#".thrift")
     #:D12127
     #hasheq((ace_mode . text) (tm_scope . source.thrift)))
    (375
     "Turing"
     programming
     (#".t" #".tu")
     #:cf142b
     #hasheq((ace_mode . text) (tm_scope . source.turing)))
    (376
     "Turtle"
     data
     (#".ttl")
     #f
     #hasheq((ace_mode . text)
             (codemirror_mode . turtle)
             (tm_scope . source.turtle)))
    (377
     "Twig"
     markup
     (#".twig")
     #:c1d026
     #hasheq((ace_mode . twig)
             (codemirror_mode . twig)
             (tm_scope . text.html.twig)))
    (632765617
     "Type Language"
     data
     (#".tl")
     #f
     #hasheq((ace_mode . text) (aliases . ("tl")) (tm_scope . source.tl)))
    (378
     "TypeScript"
     programming
     (#".ts" #".cts" #".mts")
     #:3178c6
     #hasheq((ace_mode . typescript)
             (aliases . ("ts"))
             (codemirror_mode . javascript)
             (interpreters . (deno ts-node))
             (tm_scope . source.ts)))
    (379
     "Unified Parallel C"
     programming
     (#".upc")
     #:4e3617
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (group . " C")
             (tm_scope . source.c)))
    (380
     "Unity3D Asset"
     data
     (#".anim" #".asset" #".mask" #".mat" #".meta" #".prefab" #".unity")
     #:222c37
     #hasheq((ace_mode . yaml)
             (codemirror_mode . yaml)
             (tm_scope . source.yaml)))
    (120
     "Unix Assembly"
     programming
     (#".s" #".ms")
     #f
     #hasheq((ace_mode . assembly_x86)
             (aliases . ("gas" "gnu asm" "unix asm"))
             (group . " Assembly")
             (tm_scope . source.x86)))
    (381
     "Uno"
     programming
     (#".uno")
     #:9933cc
     #hasheq((ace_mode . csharp)
             (codemirror_mode . clike)
             (tm_scope . source.cs)))
    (382
     "UnrealScript"
     programming
     (#".uc")
     #:a54c4d
     #hasheq((ace_mode . java)
             (codemirror_mode . clike)
             (tm_scope . source.java)))
    (383
     "UrWeb"
     programming
     (#".ur" #".urs")
     #:ccccee
     #hasheq((ace_mode . text)
             (aliases . ("Ur/Web" "Ur"))
             (tm_scope . source.ur)))
    (603371597
     "V"
     programming
     (#".v")
     #:4f87c4
     #hasheq((ace_mode . golang)
             (aliases . ("vlang"))
             (codemirror_mode . go)
             (tm_scope . source.v)))
    (399230729
     "VBA"
     programming
     (#".bas" #".cls" #".frm" #".vba")
     #:867db1
     #hasheq((ace_mode . text)
             (aliases . ("visual basic for applications"))
             (codemirror_mode . vb)
             (tm_scope . source.vbnet)))
    (408016005
     "VBScript"
     programming
     (#".vbs")
     #:15dcdc
     #hasheq((ace_mode . text)
             (codemirror_mode . vbscript)
             (tm_scope . source.vbnet)))
    (384
     "VCL"
     programming
     (#".vcl")
     #:148AA8
     #hasheq((ace_mode . text) (tm_scope . source.varnish.vcl)))
    (385
     "VHDL"
     programming
     (#".vhdl" #".vhd" #".vhf" #".vhi" #".vho" #".vhs" #".vht" #".vhw")
     #:adb2cb
     #hasheq((ace_mode . vhdl)
             (codemirror_mode . vhdl)
             (tm_scope . source.vhdl)))
    (386
     "Vala"
     programming
     (#".vala" #".vapi")
     #:a56de2
     #hasheq((ace_mode . vala) (tm_scope . source.vala)))
    (544060961
     "Valve Data Format"
     data
     (#".vdf")
     #:f26025
     #hasheq((ace_mode . text)
             (aliases . ("keyvalues" "vdf"))
             (tm_scope . source.keyvalues)))
    (292377326
     "Velocity Template Language"
     markup
     (#".vtl")
     #:507cff
     #hasheq((ace_mode . velocity)
             (aliases . ("vtl" "velocity"))
             (codemirror_mode . velocity)
             (tm_scope . source.velocity)))
    (387
     "Verilog"
     programming
     (#".v" #".veo")
     #:b2b7f8
     #hasheq((ace_mode . verilog)
             (codemirror_mode . verilog)
             (tm_scope . source.verilog)))
    (508563686
     "Vim Help File"
     prose
     (#".txt")
     #:199f4b
     #hasheq((ace_mode . text)
             (aliases . ("help" "vimhelp"))
             (tm_scope . text.vim-help)))
    (388
     "Vim Script"
     programming
     (#".vim" #".vba" #".vimrc" #".vmb")
     #:199f4b
     #hasheq((ace_mode . text)
             (aliases . ("vim" "viml" "nvim"))
             (filenames
              .
              (".exrc"
               ".gvimrc"
               ".nvimrc"
               ".vimrc"
               "_vimrc"
               "gvimrc"
               "nvimrc"
               "vimrc"))
             (tm_scope . source.viml)))
    (81265970
     "Vim Snippet"
     markup
     (#".snip" #".snippet" #".snippets")
     #:199f4b
     #hasheq((ace_mode . text)
             (aliases . ("SnipMate" "UltiSnip" "UltiSnips" "NeoSnippet"))
             (tm_scope . source.vim-snippet)))
    (389
     "Visual Basic .NET"
     programming
     (#".vb" #".vbhtml")
     #:945db7
     #hasheq((ace_mode . text)
             (aliases . ("visual basic" "vbnet" "vb .net" "vb.net"))
             (codemirror_mode . vb)
             (tm_scope . source.vbnet)))
    (679594952
     "Visual Basic 6.0"
     programming
     (#".cls" #".ctl" #".Dsr" #".frm")
     #:2c6353
     #hasheq((ace_mode . text)
             (aliases
              .
              ("vb6"
               "vb 6"
               "visual basic 6"
               "visual basic classic"
               "classic visual basic"))
             (codemirror_mode . vb)
             (tm_scope . source.vbnet)))
    (390
     "Volt"
     programming
     (#".volt")
     #:1F1F1F
     #hasheq((ace_mode . d) (codemirror_mode . d) (tm_scope . source.d)))
    (391
     "Vue"
     markup
     (#".vue")
     #:41b883
     #hasheq((ace_mode . html) (tm_scope . text.html.vue)))
    (1055641948
     "Vyper"
     programming
     (#".vy")
     #:2980b9
     #hasheq((ace_mode . text) (tm_scope . source.vyper)))
    (392
     "Wavefront Material"
     data
     (#".mtl")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.wavefront.mtl)))
    (393
     "Wavefront Object"
     data
     (#".obj")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.wavefront.obj)))
    (394
     "Web Ontology Language"
     data
     (#".owl")
     #:5b70bd
     #hasheq((ace_mode . xml) (tm_scope . text.xml)))
    (956556503
     "WebAssembly"
     programming
     (#".wast" #".wat")
     #:04133b
     #hasheq((ace_mode . lisp)
             (aliases . ("wast" "wasm"))
             (codemirror_mode . commonlisp)
             (tm_scope . source.webassembly)))
    (395
     "WebIDL"
     programming
     (#".webidl")
     #f
     #hasheq((ace_mode . text)
             (codemirror_mode . webidl)
             (tm_scope . source.webidl)))
    (658679714
     "WebVTT"
     data
     (#".vtt")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("vtt"))
             (tm_scope . text.vtt)
             (wrap . true)))
    (668457123
     "Wget Config"
     data
     (#"")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("wgetrc"))
             (filenames . (".wgetrc"))
             (group . " INI")
             (tm_scope . source.wgetrc)))
    (888779559
     "Whiley"
     programming
     (#".whiley")
     #:d5c397
     #hasheq((ace_mode . text) (tm_scope . source.whiley)))
    (228
     "Wikitext"
     prose
     (#".mediawiki" #".wiki" #".wikitext")
     #:fc5757
     #hasheq((ace_mode . text)
             (aliases . ("mediawiki" "wiki"))
             (tm_scope . text.html.mediawiki)
             (wrap . true)))
    (950967261
     "Win32 Message File"
     data
     (#".mc")
     #f
     #hasheq((ace_mode . ini)
             (codemirror_mode . properties)
             (tm_scope . source.win32-messages)))
    (969674868
     "Windows Registry Entries"
     data
     (#".reg")
     #:52d5ff
     #hasheq((ace_mode . ini)
             (codemirror_mode . properties)
             (tm_scope . source.reg)))
    (686821385
     "Witcher Script"
     programming
     (#".ws")
     #:ff0000
     #hasheq((ace_mode . text) (tm_scope . source.witcherscript)))
    (632745969
     "Wollok"
     programming
     (#".wlk")
     #:a23738
     #hasheq((ace_mode . text) (tm_scope . source.wollok)))
    (396
     "World of Warcraft Addon Data"
     data
     (#".toc")
     #:f7e43f
     #hasheq((ace_mode . text) (tm_scope . source.toc)))
    (713580619
     "Wren"
     programming
     (#".wren")
     #:383838
     #hasheq((ace_mode . text)
             (aliases . ("wrenlang"))
             (tm_scope . source.wren)))
    (782911107
     "X BitMap"
     data
     (#".xbm")
     #f
     #hasheq((ace_mode . c_cpp)
             (aliases . ("xbm"))
             (codemirror_mode . clike)
             (group . " C")
             (tm_scope . source.c)))
    (208700028
     "X Font Directory Index"
     data
     (#"")
     #f
     #hasheq((ace_mode . text)
             (filenames
              .
              ("encodings.dir" "fonts.alias" "fonts.dir" "fonts.scale"))
             (tm_scope . source.fontdir)))
    (781846279
     "X PixMap"
     data
     (#".xpm" #".pm")
     #f
     #hasheq((ace_mode . c_cpp)
             (aliases . ("xpm"))
             (codemirror_mode . clike)
             (group . " C")
             (tm_scope . source.c)))
    (397
     "X10"
     programming
     (#".x10")
     #:4B6BEF
     #hasheq((ace_mode . text) (aliases . ("xten")) (tm_scope . source.x10)))
    (398
     "XC"
     programming
     (#".xc")
     #:99DA07
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.xc)))
    (225167241
     "XCompose"
     data
     (#"")
     #f
     #hasheq((ace_mode . text)
             (filenames . (".XCompose" "XCompose" "xcompose"))
             (tm_scope . config.xcompose)))
    (399
     "XML"
     data
     (#".xml"
      #".adml"
      #".admx"
      #".ant"
      #".axaml"
      #".axml"
      #".builds"
      #".ccproj"
      #".ccxml"
      #".clixml"
      #".cproject"
      #".cscfg"
      #".csdef"
      #".csl"
      #".csproj"
      #".ct"
      #".depproj"
      #".dita"
      #".ditamap"
      #".ditaval"
      #".dll.config"
      #".dotsettings"
      #".filters"
      #".fsproj"
      #".fxml"
      #".glade"
      #".gml"
      #".gmx"
      #".grxml"
      #".gst"
      #".hzp"
      #".iml"
      #".ivy"
      #".jelly"
      #".jsproj"
      #".kml"
      #".launch"
      #".mdpolicy"
      #".mjml"
      #".mm"
      #".mod"
      #".mxml"
      #".natvis"
      #".ncl"
      #".ndproj"
      #".nproj"
      #".nuspec"
      #".odd"
      #".osm"
      #".pkgproj"
      #".pluginspec"
      #".proj"
      #".props"
      #".ps1xml"
      #".psc1"
      #".pt"
      #".qhelp"
      #".rdf"
      #".res"
      #".resx"
      #".rs"
      #".rss"
      #".sch"
      #".scxml"
      #".sfproj"
      #".shproj"
      #".srdf"
      #".storyboard"
      #".sublime-snippet"
      #".targets"
      #".tml"
      #".ts"
      #".tsx"
      #".ui"
      #".urdf"
      #".ux"
      #".vbproj"
      #".vcxproj"
      #".vsixmanifest"
      #".vssettings"
      #".vstemplate"
      #".vxml"
      #".wixproj"
      #".workflow"
      #".wsdl"
      #".wsf"
      #".wxi"
      #".wxl"
      #".wxs"
      #".x3d"
      #".xacro"
      #".xaml"
      #".xib"
      #".xlf"
      #".xliff"
      #".xmi"
      #".xml.dist"
      #".xmp"
      #".xproj"
      #".xsd"
      #".xspec"
      #".xul"
      #".zcml")
     #:0060ac
     #hasheq((ace_mode . xml)
             (aliases . ("rss" "xsd" "wsdl"))
             (codemirror_mode . xml)
             (filenames
              .
              (".classpath"
               ".cproject"
               ".project"
               "App.config"
               "NuGet.config"
               "Settings.StyleCop"
               "Web.Debug.config"
               "Web.Release.config"
               "Web.config"
               "packages.config"))
             (tm_scope . text.xml)))
    (75622871
     "XML Property List"
     data
     (#".plist"
      #".stTheme"
      #".tmCommand"
      #".tmLanguage"
      #".tmPreferences"
      #".tmSnippet"
      #".tmTheme")
     #:0060ac
     #hasheq((ace_mode . xml)
             (codemirror_mode . xml)
             (group . " XML")
             (tm_scope . text.xml.plist)))
    (400
     "XPages"
     data
     (#".xsp-config" #".xsp.metadata")
     #f
     #hasheq((ace_mode . xml) (codemirror_mode . xml) (tm_scope . text.xml)))
    (401
     "XProc"
     programming
     (#".xpl" #".xproc")
     #f
     #hasheq((ace_mode . xml) (codemirror_mode . xml) (tm_scope . text.xml)))
    (402
     "XQuery"
     programming
     (#".xquery" #".xq" #".xql" #".xqm" #".xqy")
     #:5232e7
     #hasheq((ace_mode . xquery)
             (codemirror_mode . xquery)
             (tm_scope . source.xq)))
    (403
     "XS"
     programming
     (#".xs")
     #f
     #hasheq((ace_mode . c_cpp)
             (codemirror_mode . clike)
             (tm_scope . source.c)))
    (404
     "XSLT"
     programming
     (#".xslt" #".xsl")
     #:EB8CEB
     #hasheq((ace_mode . xml)
             (aliases . ("xsl"))
             (codemirror_mode . xml)
             (tm_scope . text.xml.xsl)))
    (405
     "Xojo"
     programming
     (#".xojo_code"
      #".xojo_menu"
      #".xojo_report"
      #".xojo_script"
      #".xojo_toolbar"
      #".xojo_window")
     #:81bd41
     #hasheq((ace_mode . text) (tm_scope . source.xojo)))
    (614078284
     "Xonsh"
     programming
     (#".xsh")
     #:285EEF
     #hasheq((ace_mode . text)
             (codemirror_mode . python)
             (tm_scope . source.python)))
    (406
     "Xtend"
     programming
     (#".xtend")
     #:24255d
     #hasheq((ace_mode . text) (tm_scope . source.xtend)))
    (407
     "YAML"
     data
     (#".yml"
      #".mir"
      #".reek"
      #".rviz"
      #".sublime-syntax"
      #".syntax"
      #".yaml"
      #".yaml-tmlanguage"
      #".yaml.sed"
      #".yml.mysql")
     #:cb171e
     #hasheq((ace_mode . yaml)
             (aliases . ("yml"))
             (codemirror_mode . yaml)
             (filenames
              .
              (".clang-format"
               ".clang-tidy"
               ".gemrc"
               "CITATION.cff"
               "glide.lock"
               "yarn.lock"))
             (tm_scope . source.yaml)))
    (408
     "YANG"
     data
     (#".yang")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.yang)))
    (805122868
     "YARA"
     programming
     (#".yar" #".yara")
     #:220000
     #hasheq((ace_mode . text) (tm_scope . source.yara)))
    (378760102
     "YASnippet"
     markup
     (#".yasnippet")
     #:32AB90
     #hasheq((ace_mode . text)
             (aliases . ("snippet" "yas"))
             (tm_scope . source.yasnippet)))
    (409
     "Yacc"
     programming
     (#".y" #".yacc" #".yy")
     #:4B6C4B
     #hasheq((ace_mode . text) (tm_scope . source.yacc)))
    (237469033
     "Yul"
     programming
     (#".yul")
     #:794932
     #hasheq((ace_mode . text) (tm_scope . source.yul)))
    (952972794
     "ZAP"
     programming
     (#".zap" #".xzap")
     #:0d665e
     #hasheq((ace_mode . text) (tm_scope . source.zap)))
    (973483626
     "ZIL"
     programming
     (#".zil" #".mud")
     #:dc75e5
     #hasheq((ace_mode . text) (tm_scope . source.zil)))
    (40
     "Zeek"
     programming
     (#".zeek" #".bro")
     #f
     #hasheq((ace_mode . text) (aliases . ("bro")) (tm_scope . source.zeek)))
    (494938890
     "ZenScript"
     programming
     (#".zs")
     #:00BCD1
     #hasheq((ace_mode . text) (tm_scope . source.zenscript)))
    (410
     "Zephir"
     programming
     (#".zep")
     #:118f9e
     #hasheq((ace_mode . php) (tm_scope . source.php.zephir)))
    (646424281
     "Zig"
     programming
     (#".zig")
     #:ec915c
     #hasheq((ace_mode . text) (tm_scope . source.zig)))
    (411
     "Zimpl"
     programming
     (#".zimpl" #".zmpl" #".zpl")
     #:d67711
     #hasheq((ace_mode . text) (tm_scope . none)))
    (992375436
     "cURL Config"
     data
     (#"")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("curlrc"))
             (filenames . (".curlrc" "_curlrc"))
             (group . " INI")
             (tm_scope . source.curlrc)))
    (412
     "desktop"
     data
     (#".desktop" #".desktop.in" #".service")
     #f
     #hasheq((ace_mode . text) (tm_scope . source.desktop)))
    (691605112
     "dircolors"
     data
     (#".dircolors")
     #f
     #hasheq((ace_mode . text)
             (filenames
              .
              (".dir_colors"
               ".dircolors"
               "DIR_COLORS"
               "_dir_colors"
               "_dircolors"
               "dir_colors"))
             (tm_scope . source.dircolors)))
    (413
     "eC"
     programming
     (#".ec" #".eh")
     #:913960
     #hasheq((ace_mode . text) (tm_scope . source.c.ec)))
    (414
     "edn"
     data
     (#".edn")
     #f
     #hasheq((ace_mode . clojure)
             (codemirror_mode . clojure)
             (tm_scope . source.clojure)))
    (415
     "fish"
     programming
     (#".fish")
     #:4aae47
     #hasheq((ace_mode . text)
             (group . " Shell")
             (interpreters . (fish))
             (tm_scope . source.fish)))
    (560883276
     "hoon"
     programming
     (#".hoon")
     #:00b171
     #hasheq((ace_mode . text) (tm_scope . source.hoon)))
    (905371884
     "jq"
     programming
     (#".jq")
     #:c7254e
     #hasheq((ace_mode . text) (tm_scope . source.jq)))
    (128447695
     "just"
     programming
     (#"")
     #:384d54
     #hasheq((ace_mode . text)
             (aliases . ("Justfile"))
             (filenames . ("Justfile"))
             (tm_scope . source.just)))
    (970675279
     "kvlang"
     markup
     (#".kv")
     #:1da6e0
     #hasheq((ace_mode . text) (tm_scope . source.python.kivy)))
    (517654727
     "mIRC Script"
     programming
     (#".mrc")
     #:3d57c3
     #hasheq((ace_mode . text) (tm_scope . source.msl)))
    (462488745
     "mcfunction"
     programming
     (#".mcfunction")
     #:E22837
     #hasheq((ace_mode . text) (tm_scope . source.mcfunction)))
    (416
     "mupad"
     programming
     (#".mu")
     #:244963
     #hasheq((ace_mode . text) (tm_scope . source.mupad)))
    (775996197
     "nanorc"
     data
     (#".nanorc")
     #:2d004d
     #hasheq((ace_mode . text)
             (filenames . (".nanorc" "nanorc"))
             (group . " INI")
             (tm_scope . source.nanorc)))
    (417
     "nesC"
     programming
     (#".nc")
     #:94B0C7
     #hasheq((ace_mode . text) (tm_scope . source.nesc)))
    (418
     "ooc"
     programming
     (#".ooc")
     #:b0b77e
     #hasheq((ace_mode . text) (tm_scope . source.ooc)))
    (970539067
     "q"
     programming
     (#".q")
     #:0040cd
     #hasheq((ace_mode . text) (tm_scope . source.q)))
    (419
     "reStructuredText"
     prose
     (#".rst" #".rest" #".rest.txt" #".rst.txt")
     #:141414
     #hasheq((ace_mode . text)
             (aliases . ("rst"))
             (codemirror_mode . rst)
             (tm_scope . text.restructuredtext)
             (wrap . true)))
    (674736065
     "robots.txt"
     data
     (#"")
     #f
     #hasheq((ace_mode . text)
             (aliases . ("robots" "robots txt"))
             (filenames . ("robots.txt"))
             (tm_scope . text.robots-txt)))
    (847830017
     "sed"
     programming
     (#".sed")
     #:64b970
     #hasheq((ace_mode . text)
             (interpreters . (gsed minised sed ssed))
             (tm_scope . source.sed)))
    (374521672
     "wdl"
     programming
     (#".wdl")
     #:42f1f4
     #hasheq((ace_mode . text) (tm_scope . source.wdl)))
    (420
     "wisp"
     programming
     (#".wisp")
     #:7582D1
     #hasheq((ace_mode . clojure)
             (codemirror_mode . clojure)
             (tm_scope . source.clojure)))
    (421
     "xBase"
     programming
     (#".prg" #".ch" #".prw")
     #:403a40
     #hasheq((ace_mode . text)
             (aliases . ("advpl" "clipper" "foxpro"))
             (tm_scope . source.harbour)))))
